Index: note/UwithgpU_MPS.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/note/UwithgpU_MPS.ipynb b/note/UwithgpU_MPS.ipynb
new file mode 100644
--- /dev/null	
+++ b/note/UwithgpU_MPS.ipynb	
@@ -0,0 +1,532 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "outputs": [],
+   "source": [
+    "import numpy as np\n",
+    "import matplotlib.pyplot as plt\n",
+    "import qutip\n",
+    "%matplotlib notebook\n",
+    "from scipy.signal.windows import dpss\n",
+    "from scipy.interpolate import interp1d\n",
+    "import torch"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-08T16:28:24.468761Z",
+     "start_time": "2023-12-08T16:28:24.467054Z"
+    }
+   },
+   "id": "initial_id"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 5,
+   "outputs": [],
+   "source": [
+    "if torch.backends.mps.is_available():\n",
+    "    device = torch.device(\"mps\")\n",
+    "else:\n",
+    "    print (\"MPS device not found.\")"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-08T16:28:24.879448Z",
+     "start_time": "2023-12-08T16:28:24.876418Z"
+    }
+   },
+   "id": "32bf351665c1a177"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 6,
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "2.1.0.post100\n"
+     ]
+    }
+   ],
+   "source": [
+    "print(torch.__version__)"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-08T16:28:25.040297Z",
+     "start_time": "2023-12-08T16:28:25.037025Z"
+    }
+   },
+   "id": "29ef83d3db9f4844"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 7,
+   "outputs": [],
+   "source": [
+    "def make_U(H, time_step, device=device):\n",
+    "    \"\"\"\n",
+    "    Convert the function to utilize PyTorch and run on a GPU.\n",
+    "\n",
+    "    PARAMETERS\n",
+    "        H : Tensor of shape (4,4) representing the time-dependent Hamiltonian\n",
+    "        time_step : float, the time step for integration\n",
+    "        device : string, the device to run the calculations on ('cuda' for GPU or 'cpu' for CPU)\n",
+    "\n",
+    "    RETURNS\n",
+    "        U : function of t, which computes the unitary time evolution operator U(t)\n",
+    "    \"\"\"\n",
+    "    hbar = 1.  # Planck's constant (set to 1 for simplicity)\n",
+    "    I = torch.eye(4, dtype=torch.complex128, device=device)  # Identity matrix\n",
+    "\n",
+    "    def U(t):\n",
+    "        total = I  # U(t=0)\n",
+    "        check = [I]\n",
+    "        times = torch.arange(start=0, end=t, step=time_step, device=device)\n",
+    "        for time in times:\n",
+    "            derivative = (-1j / hbar) * torch.matmul(H(time), total) * time_step\n",
+    "            total = total + derivative\n",
+    "            check.append(total) \n",
+    "        return total, np.array(check)\n",
+    "    return U\n"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-08T16:28:25.198398Z",
+     "start_time": "2023-12-08T16:28:25.196254Z"
+    }
+   },
+   "id": "718453241c4fc8b7"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 8,
+   "outputs": [],
+   "source": [
+    "def make_H_int(g,delta_omega):\n",
+    "    \"\"\"\n",
+    "    \n",
+    "    :param g: coupling strength\n",
+    "    :param detuning: omega_q1 - omega_q2\n",
+    "    :return: \n",
+    "    \"\"\"\n",
+    "    def H_int(t):\n",
+    "        matrix=np.zeros((4,4),dtype=torch.complex128)\n",
+    "        matrix[2][1] = np.exp((1j)*delta_omega*t)\n",
+    "        matrix[1][2] = np.exp((-1j)*delta_omega*t)\n",
+    "        return g(t)*matrix\n",
+    "    return H_int"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-08T16:28:25.348849Z",
+     "start_time": "2023-12-08T16:28:25.346623Z"
+    }
+   },
+   "id": "542e2c948c010120"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 9,
+   "outputs": [],
+   "source": [
+    "def make_H_d1(Omega,V_0,delta_omega,phi,s):\n",
+    "    \"\"\"\n",
+    "    :param Omega:  \n",
+    "    :param V_0: \n",
+    "    :param delta_omega:omega_q - omega_d \n",
+    "    :param phi: offset in driving sine wave\n",
+    "    :param s: control pulse\n",
+    "    :return: \n",
+    "    \"\"\"\n",
+    "    I=np.identity(2,dtype=complex)\n",
+    "\n",
+    "    def H(t):\n",
+    "        matrix=torch.tensor((2,2),device=device,dtype=torch.complex64)\n",
+    "        matrix[0][1]=np.exp((1j)*(delta_omega*t+phi))\n",
+    "        matrix[1][0]=np.exp((-1j)*(delta_omega*t+phi))\n",
+    "    \n",
+    "        return (-0.5)*Omega*V_0*s(t)*np.kron(matrix,I)\n",
+    "    \n",
+    "    return H #4by4 matrix"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-08T16:28:26.190277Z",
+     "start_time": "2023-12-08T16:28:26.186664Z"
+    }
+   },
+   "id": "b20ae6471f14095b"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 10,
+   "outputs": [
+    {
+     "ename": "TypeError",
+     "evalue": "ones() received an invalid combination of arguments - got (tuple, dtype=builtin_function_or_method, device=torch.device), but expected one of:\n * (tuple of ints size, *, tuple of names names, torch.dtype dtype, torch.layout layout, torch.device device, bool pin_memory, bool requires_grad)\n * (tuple of ints size, *, Tensor out, torch.dtype dtype, torch.layout layout, torch.device device, bool pin_memory, bool requires_grad)\n",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[0;31mTypeError\u001B[0m                                 Traceback (most recent call last)",
+      "Cell \u001B[0;32mIn[10], line 1\u001B[0m\n\u001B[0;32m----> 1\u001B[0m matrix\u001B[38;5;241m=\u001B[39mtorch\u001B[38;5;241m.\u001B[39mones((\u001B[38;5;241m2\u001B[39m,\u001B[38;5;241m2\u001B[39m),device\u001B[38;5;241m=\u001B[39mdevice,dtype\u001B[38;5;241m=\u001B[39mtorch\u001B[38;5;241m.\u001B[39mcomplex)\n",
+      "\u001B[0;31mTypeError\u001B[0m: ones() received an invalid combination of arguments - got (tuple, dtype=builtin_function_or_method, device=torch.device), but expected one of:\n * (tuple of ints size, *, tuple of names names, torch.dtype dtype, torch.layout layout, torch.device device, bool pin_memory, bool requires_grad)\n * (tuple of ints size, *, Tensor out, torch.dtype dtype, torch.layout layout, torch.device device, bool pin_memory, bool requires_grad)\n"
+     ]
+    }
+   ],
+   "source": [
+    "matrix=torch.ones((2,2),device=device,dtype=torch.complex)"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-08T16:28:26.767223Z",
+     "start_time": "2023-12-08T16:28:26.626250Z"
+    }
+   },
+   "id": "85a299cedffb651"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 11,
+   "outputs": [],
+   "source": [
+    "def make_H_d2(Omega,V_0,delta_omega,phi,s):\n",
+    "    \"\"\"\n",
+    "    :param Omega:  \n",
+    "    :param V_0: \n",
+    "    :param delta_omega:omega_q - omega_d \n",
+    "    :param phi: offset in driving sine wave\n",
+    "    :param s: control pulse\n",
+    "    :return: \n",
+    "    \"\"\"\n",
+    "    I=np.identity(2,dtype=complex)\n",
+    "    \n",
+    "    def H(t):\n",
+    "        matrix=np.zeros((2,2),dtype='complex128')\n",
+    "        matrix[0][1]=np.exp((1j)*(delta_omega*t+phi))\n",
+    "        matrix[1][0]=np.exp((-1j)*(delta_omega*t+phi))\n",
+    "    \n",
+    "        return (-0.5)*Omega*V_0*s(t)*np.kron(I,matrix)\n",
+    "    \n",
+    "    return H #4by4 matrix"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-08T16:28:26.940659Z",
+     "start_time": "2023-12-08T16:28:26.937296Z"
+    }
+   },
+   "id": "9add191151bd40e2"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 12,
+   "outputs": [],
+   "source": [
+    "def g(t):\n",
+    "    return 0.04*2*np.pi \n",
+    "# 40MHz"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-08T16:28:27.111468Z",
+     "start_time": "2023-12-08T16:28:27.107176Z"
+    }
+   },
+   "id": "bd3846979ebc15a7"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "def s(t):\n",
+    "    return 1"
+   ],
+   "metadata": {
+    "collapsed": false
+   },
+   "id": "88a499035ddc46dd"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "def slepian(t):\n",
+    "    Fs = 10 #sampling rate 1ns에 10번 \n",
+    "    N = 500\n",
+    "    time = np.arange(N+1)/Fs \n",
+    "    #freq = np.fft.fftfreq(N+1,d=1/Fs)\n",
+    "    NW = 6    # Time-halfbandwidth product\n",
+    "    # Generating the Slepian sequences\n",
+    "    slepian_sequence = dpss(N+1, NW)\n",
+    "    slepian_continuous = interp1d(time, slepian_sequence, kind='cubic')\n",
+    "    return slepian_continuous(t)"
+   ],
+   "metadata": {
+    "collapsed": false
+   },
+   "id": "b343016ce2fa41df"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "Fs = 10 #sampling rate 1ns에 10번 \n",
+    "N = 500\n",
+    "time = np.arange(N+1)/Fs \n",
+    "    #freq = np.fft.fftfreq(N+1,d=1/Fs)\n",
+    "NW =  3   # Time-halfbandwidth product\n",
+    "    # Generating the Slepian sequences\n",
+    "slepian_sequence = dpss(N+1, NW)\n",
+    "slepian_sequence2 = dpss(N+1, 6)\n",
+    "fig, ax = plt.subplots()\n",
+    "ax.plot(slepian_sequence)\n",
+    "ax.plot(slepian_sequence2)"
+   ],
+   "metadata": {
+    "collapsed": false
+   },
+   "id": "d52ea56db17f31c3"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "#Setting\n",
+    "omega1 = 0.01 * 2 * np.pi #10MHz\n",
+    "omega2 = 0.01 * 2 * np.pi #10MHz\n",
+    "V1=1.\n",
+    "V2=1. #unit?\n",
+    "delta_omega1 = 0.001 * 2 * np.pi #1MHz #qubit frequency and driving frequency\n",
+    "delta_omega2 = 0.001 * 2 * np.pi #1MHz\n",
+    "delta_q12 = 1 * 2 * np.pi # 1GHz\n",
+    "phi1 = 0.001\n",
+    "phi2 = 0.001"
+   ],
+   "metadata": {
+    "collapsed": false
+   },
+   "id": "6be19978740e9cfa"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "H_int = make_H_int(g=g,delta_omega=delta_omega2) \n",
+    "H_d1 = make_H_d1(Omega=omega1, V_0=V1,delta_omega=delta_omega1,s=slepian,phi=phi1)\n",
+    "H_d2 = make_H_d2(Omega=omega2, V_0=V2,delta_omega=delta_omega2,s=slepian,phi=phi2)\n",
+    "def H(t):\n",
+    "    return H_int(t)+H_d1(t)+H_d2(t)"
+   ],
+   "metadata": {
+    "collapsed": false
+   },
+   "id": "9b3f01420ab73855"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "U = make_U(H, time_step=1e-4)"
+   ],
+   "metadata": {
+    "collapsed": false
+   },
+   "id": "586da179c863d67b"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "Uhigh = make_U(H, time_step=1e-5)"
+   ],
+   "metadata": {
+    "collapsed": false
+   },
+   "id": "f5504cafd83f15ff"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "transition, info = U(50.) #한번 돌리는데 4분30초...GPU로 계산하면 더 빠른가?"
+   ],
+   "metadata": {
+    "collapsed": false
+   },
+   "id": "2b135f0461b55d"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "transition2, info2 = Uhigh(50.)"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "is_executing": true
+   },
+   "id": "3cf66ad789534d34"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "np.save('1e-4_info.npy',info)"
+   ],
+   "metadata": {
+    "collapsed": false
+   },
+   "id": "35638968121f626a"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "trajectories=[]\n",
+    "fig, ax = plt.subplots()\n",
+    "ax.plot(np.arange(start=0,stop=50.+1e-4,step=1e-4),[u[1,0] for u in info])\n",
+    "    "
+   ],
+   "metadata": {
+    "collapsed": false
+   },
+   "id": "d02a90c75f3008c8"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "unitary_check=np.matmul(np.matrix.getH(transition),transition)\n",
+    "unitary_check"
+   ],
+   "metadata": {
+    "collapsed": false
+   },
+   "id": "88166d94748ae3b"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "#prepare qubit 1 in e \n",
+    "initial_state = np.array([0,0,1.,0,], dtype=complex)\n",
+    "desired_state = np.array([0,1.,0,0,], dtype=complex)\n",
+    "\n",
+    "iSWAP=np.zeros((4,4),dtype=complex)\n",
+    "iSWAP[0,0]=1.\n",
+    "iSWAP[3,3]=1.\n",
+    "iSWAP[2,1]=-1j\n",
+    "iSWAP[1,2]=-1j\n"
+   ],
+   "metadata": {
+    "collapsed": false
+   },
+   "id": "e6daa347ed839f8f"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "trans_state=np.matmul(iSWAP,initial_state)\n",
+    "np.matmul(np.matrix.getH(desired_state),trans_state)"
+   ],
+   "metadata": {
+    "collapsed": false
+   },
+   "id": "cefcafbd8acf47ca"
+  },
+  {
+   "cell_type": "markdown",
+   "source": [
+    "$$s_1(t),\\ s_2(t), g(t)$$\n",
+    "\n"
+   ],
+   "metadata": {
+    "collapsed": false
+   },
+   "id": "99aeae190f40d3b1"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "np.matrix.getH(desired_state)"
+   ],
+   "metadata": {
+    "collapsed": false
+   },
+   "id": "f0b4ac664b874bad"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [
+    "trans_state"
+   ],
+   "metadata": {
+    "collapsed": false
+   },
+   "id": "8bbb60f88f35a24d"
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [],
+   "metadata": {
+    "collapsed": false
+   },
+   "id": "502c6d04ccc86a00"
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 2
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython2",
+   "version": "2.7.6"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 5
+}
Index: note/20231207.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 128,\n   \"outputs\": [],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import qutip\\n\",\n    \"from scipy.signal.windows import dpss\\n\",\n    \"from scipy.interpolate import interp1d\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T23:53:19.550411Z\",\n     \"start_time\": \"2023-12-07T23:53:19.544620Z\"\n    }\n   },\n   \"id\": \"initial_id\"\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"Two fixed frequency qubit coupled via tunable coupler ($w_{q1}-w_{q2}=constant$)\\n\",\n    \"(All qubit are assumed as a perfect two level system)\\n\",\n    \"## Let's make iSWAP\\n\",\n    \"$$U_{iSWAP}=\\\\begin{bmatrix}\\n\",\n    \"1 & 0 & 0 & 0\\\\\\\\\\n\",\n    \"0 & 0 & -i & 0 \\\\\\\\\\n\",\n    \"0 & -i & 0 & 0 \\\\\\\\\\n\",\n    \"0 & 0 & 0 & 1\\n\",\n    \"\\\\end{bmatrix}$$\\n\",\n    \"\\n\",\n    \"from $|10>$ state to $|01> $\\n\",\n    \"\\n\",\n    \"$$\\\\tilde{H}(t)=g(t) \\n\",\n    \"\\\\begin{bmatrix}\\n\",\n    \"0 & 0 & 0 & 0\\\\\\\\\\n\",\n    \"0 & 0 & e^{-i\\\\delta \\\\omega_{12}t} & 0 \\\\\\\\\\n\",\n    \"0 & e^{i\\\\delta \\\\omega_{12}t} & 0 & 0 \\\\\\\\\\n\",\n    \"0 & 0 & 0 & 0\\n\",\n    \"\\\\end{bmatrix}\\n\",\n    \"\\n\",\n    \"-\\\\frac{\\\\Omega_1}{2}V_1S_1(t)\\n\",\n    \"\\\\begin{bmatrix}\\n\",\n    \"0 & 0 & e^{i(\\\\delta \\\\omega_{1d}t + \\\\phi_1)} & 0\\\\\\\\\\n\",\n    \"0 & 0 & 0 & e^{i(\\\\delta \\\\omega_{1d}t + \\\\phi_1)} \\\\\\\\\\n\",\n    \"e^{-i(\\\\delta \\\\omega_{1d}t + \\\\phi_1)} & 0 & 0 & 0 \\\\\\\\\\n\",\n    \"0 & e^{-i(\\\\delta \\\\omega_{1d}t + \\\\phi_1)} & 0 & 0\\n\",\n    \"\\\\end{bmatrix}\\n\",\n    \"\\n\",\n    \"-\\\\frac{\\\\Omega_2}{2}V_2S_2(t)\\n\",\n    \"\\\\begin{bmatrix}\\n\",\n    \"0 & e^{i(\\\\delta \\\\omega_{2d}t + \\\\phi_2)}& 0 & 0\\\\\\\\\\n\",\n    \"e^{-i(\\\\delta \\\\omega_{2d}t + \\\\phi_2)} & 0 & 0 & 0 \\\\\\\\\\n\",\n    \"0 & 0 & 0 & e^{i(\\\\delta \\\\omega_{2d}t + \\\\phi_2)}\\\\\\\\\\n\",\n    \"0 & 0 & e^{-i(\\\\delta \\\\omega_{2d}t + \\\\phi_2)} & 0\\n\",\n    \"\\\\end{bmatrix}$$\\n\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"id\": \"eeabdaa9530867fb\"\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"# Setting\\n\",\n    \"\\n\",\n    \"### Rabi oscillation frequency $\\\\Omega$\\n\",\n    \"\\n\",\n    \"$\\\\Omega_1/(2\\\\pi)=0.01$(10MHz)\\n\",\n    \"$\\\\Omega_2/(2\\\\pi)=0.01$(10MHz)\\n\",\n    \"\\n\",\n    \"### Qubit frequency difference $\\\\delta \\\\omega_{12}$\\n\",\n    \"얘네가 문제임 Z line으로 control 가능하게 해야 realistic 한데\\n\",\n    \"\\n\",\n    \"### Detuning $\\\\delta \\\\omega_{1}$, $\\\\delta \\\\omega_{2}$\\n\",\n    \"$\\\\delta \\\\omega=\\\\omega_q -\\\\omega_d$\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"### g\\n\",\n    \"$g/(2\\\\pi)$=\\n\",\n    \"\\n\",\n    \"### Anharmonicty $\\\\eta$\\n\",\n    \"$\\\\eta/(2\\\\pi)=0$ 아직 추가안함\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"\\n\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"id\": \"2cd76ed8a0540aeb\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 44,\n   \"outputs\": [],\n   \"source\": [\n    \"def make_U(H, time_step):\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    PARAMETER\\n\",\n    \"        Hamiltonian : function of t\\n\",\n    \"        time_step : float\\n\",\n    \"    RETURNS\\n\",\n    \"        U : function of t\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    hbar = 1.\\n\",\n    \"    I = np.identity(4,dtype=\\\"complex128\\\")\\n\",\n    \"    \\n\",\n    \"    def U(t):\\n\",\n    \"        total = I #U(t=0)\\n\",\n    \"        check = [I]\\n\",\n    \"        times = np.arange(start=0,stop=t,step=time_step)\\n\",\n    \"        for time in times:\\n\",\n    \"            derivative = (-1j/hbar)*np.matmul(H(time),total)*time_step\\n\",\n    \"            total = total + derivative\\n\",\n    \"            check.append(total) \\n\",\n    \"        return total, np.array(check)\\n\",\n    \"    return U\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T21:14:31.165215Z\",\n     \"start_time\": \"2023-12-07T21:14:31.163233Z\"\n    }\n   },\n   \"id\": \"46726427f8a1e49d\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 45,\n   \"outputs\": [],\n   \"source\": [\n    \"def make_H_int(g,delta_omega):\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    \\n\",\n    \"    :param g: coupling strength\\n\",\n    \"    :param detuning: omega_q1 - omega_q2\\n\",\n    \"    :return: \\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    def H_int(t):\\n\",\n    \"        matrix=np.zeros((4,4),dtype=\\\"complex128\\\")\\n\",\n    \"        matrix[2][1] = np.exp((1j)*delta_omega*t)\\n\",\n    \"        matrix[1][2] = np.exp((-1j)*delta_omega*t)\\n\",\n    \"        return g(t)*matrix\\n\",\n    \"    return H_int\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T21:14:31.268261Z\",\n     \"start_time\": \"2023-12-07T21:14:31.265159Z\"\n    }\n   },\n   \"id\": \"542e2c948c010120\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 46,\n   \"outputs\": [],\n   \"source\": [\n    \"def make_H_d1(Omega,V_0,delta_omega,phi,s):\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    :param Omega:  \\n\",\n    \"    :param V_0: \\n\",\n    \"    :param delta_omega:omega_q - omega_d \\n\",\n    \"    :param phi: offset in driving sine wave\\n\",\n    \"    :param s: control pulse\\n\",\n    \"    :return: \\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    I=np.identity(2,dtype=complex)\\n\",\n    \"\\n\",\n    \"    def H(t):\\n\",\n    \"        matrix=np.zeros((2,2),dtype=complex)\\n\",\n    \"        matrix[0][1]=np.exp((1j)*(delta_omega*t+phi))\\n\",\n    \"        matrix[1][0]=np.exp((-1j)*(delta_omega*t+phi))\\n\",\n    \"    \\n\",\n    \"        return (-0.5)*Omega*V_0*s(t)*np.kron(matrix,I)\\n\",\n    \"    \\n\",\n    \"    return H #4by4 matrix\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T21:14:31.448027Z\",\n     \"start_time\": \"2023-12-07T21:14:31.444572Z\"\n    }\n   },\n   \"id\": \"b20ae6471f14095b\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 47,\n   \"outputs\": [],\n   \"source\": [\n    \"def make_H_d2(Omega,V_0,delta_omega,phi,s):\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    :param Omega:  \\n\",\n    \"    :param V_0: \\n\",\n    \"    :param delta_omega:omega_q - omega_d \\n\",\n    \"    :param phi: offset in driving sine wave\\n\",\n    \"    :param s: control pulse\\n\",\n    \"    :return: \\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    I=np.identity(2,dtype=complex)\\n\",\n    \"    \\n\",\n    \"    def H(t):\\n\",\n    \"        matrix=np.zeros((2,2),dtype='complex128')\\n\",\n    \"        matrix[0][1]=np.exp((1j)*(delta_omega*t+phi))\\n\",\n    \"        matrix[1][0]=np.exp((-1j)*(delta_omega*t+phi))\\n\",\n    \"    \\n\",\n    \"        return (-0.5)*Omega*V_0*s(t)*np.kron(I,matrix)\\n\",\n    \"    \\n\",\n    \"    return H #4by4 matrix\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T21:14:31.621571Z\",\n     \"start_time\": \"2023-12-07T21:14:31.618533Z\"\n    }\n   },\n   \"id\": \"9add191151bd40e2\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 48,\n   \"outputs\": [],\n   \"source\": [\n    \"def g(t):\\n\",\n    \"    return 0.04*2*np.pi \\n\",\n    \"# 40MHz\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T21:14:31.797170Z\",\n     \"start_time\": \"2023-12-07T21:14:31.793414Z\"\n    }\n   },\n   \"id\": \"bd3846979ebc15a7\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 93,\n   \"outputs\": [],\n   \"source\": [\n    \"def s(t):\\n\",\n    \"    return 1\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T21:31:25.760678Z\",\n     \"start_time\": \"2023-12-07T21:31:25.754972Z\"\n    }\n   },\n   \"id\": \"88a499035ddc46dd\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 110,\n   \"outputs\": [],\n   \"source\": [\n    \"def slepian(t):\\n\",\n    \"    Fs = 10 #sampling rate 1ns에 10번 \\n\",\n    \"    N = 500\\n\",\n    \"    time = np.arange(N+1)/Fs \\n\",\n    \"    #freq = np.fft.fftfreq(N+1,d=1/Fs)\\n\",\n    \"    NW = 6    # Time-halfbandwidth product\\n\",\n    \"    # Generating the Slepian sequences\\n\",\n    \"    slepian_sequence = dpss(N+1, NW)\\n\",\n    \"    slepian_continuous = interp1d(time, slepian_sequence, kind='cubic')\\n\",\n    \"    return slepian_continuous(t)\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T22:45:40.981403Z\",\n     \"start_time\": \"2023-12-07T22:45:40.975125Z\"\n    }\n   },\n   \"id\": \"b343016ce2fa41df\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 109,\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": \"<IPython.core.display.Javascript object>\",\n      \"application/javascript\": \"/* Put everything inside the global mpl namespace */\\n/* global mpl */\\nwindow.mpl = {};\\n\\nmpl.get_websocket_type = function () {\\n    if (typeof WebSocket !== 'undefined') {\\n        return WebSocket;\\n    } else if (typeof MozWebSocket !== 'undefined') {\\n        return MozWebSocket;\\n    } else {\\n        alert(\\n            'Your browser does not have WebSocket support. ' +\\n                'Please try Chrome, Safari or Firefox ≥ 6. ' +\\n                'Firefox 4 and 5 are also supported but you ' +\\n                'have to enable WebSockets in about:config.'\\n        );\\n    }\\n};\\n\\nmpl.figure = function (figure_id, websocket, ondownload, parent_element) {\\n    this.id = figure_id;\\n\\n    this.ws = websocket;\\n\\n    this.supports_binary = this.ws.binaryType !== undefined;\\n\\n    if (!this.supports_binary) {\\n        var warnings = document.getElementById('mpl-warnings');\\n        if (warnings) {\\n            warnings.style.display = 'block';\\n            warnings.textContent =\\n                'This browser does not support binary websocket messages. ' +\\n                'Performance may be slow.';\\n        }\\n    }\\n\\n    this.imageObj = new Image();\\n\\n    this.context = undefined;\\n    this.message = undefined;\\n    this.canvas = undefined;\\n    this.rubberband_canvas = undefined;\\n    this.rubberband_context = undefined;\\n    this.format_dropdown = undefined;\\n\\n    this.image_mode = 'full';\\n\\n    this.root = document.createElement('div');\\n    this.root.setAttribute('style', 'display: inline-block');\\n    this._root_extra_style(this.root);\\n\\n    parent_element.appendChild(this.root);\\n\\n    this._init_header(this);\\n    this._init_canvas(this);\\n    this._init_toolbar(this);\\n\\n    var fig = this;\\n\\n    this.waiting = false;\\n\\n    this.ws.onopen = function () {\\n        fig.send_message('supports_binary', { value: fig.supports_binary });\\n        fig.send_message('send_image_mode', {});\\n        if (fig.ratio !== 1) {\\n            fig.send_message('set_device_pixel_ratio', {\\n                device_pixel_ratio: fig.ratio,\\n            });\\n        }\\n        fig.send_message('refresh', {});\\n    };\\n\\n    this.imageObj.onload = function () {\\n        if (fig.image_mode === 'full') {\\n            // Full images could contain transparency (where diff images\\n            // almost always do), so we need to clear the canvas so that\\n            // there is no ghosting.\\n            fig.context.clearRect(0, 0, fig.canvas.width, fig.canvas.height);\\n        }\\n        fig.context.drawImage(fig.imageObj, 0, 0);\\n    };\\n\\n    this.imageObj.onunload = function () {\\n        fig.ws.close();\\n    };\\n\\n    this.ws.onmessage = this._make_on_message_function(this);\\n\\n    this.ondownload = ondownload;\\n};\\n\\nmpl.figure.prototype._init_header = function () {\\n    var titlebar = document.createElement('div');\\n    titlebar.classList =\\n        'ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix';\\n    var titletext = document.createElement('div');\\n    titletext.classList = 'ui-dialog-title';\\n    titletext.setAttribute(\\n        'style',\\n        'width: 100%; text-align: center; padding: 3px;'\\n    );\\n    titlebar.appendChild(titletext);\\n    this.root.appendChild(titlebar);\\n    this.header = titletext;\\n};\\n\\nmpl.figure.prototype._canvas_extra_style = function (_canvas_div) {};\\n\\nmpl.figure.prototype._root_extra_style = function (_canvas_div) {};\\n\\nmpl.figure.prototype._init_canvas = function () {\\n    var fig = this;\\n\\n    var canvas_div = (this.canvas_div = document.createElement('div'));\\n    canvas_div.setAttribute('tabindex', '0');\\n    canvas_div.setAttribute(\\n        'style',\\n        'border: 1px solid #ddd;' +\\n            'box-sizing: content-box;' +\\n            'clear: both;' +\\n            'min-height: 1px;' +\\n            'min-width: 1px;' +\\n            'outline: 0;' +\\n            'overflow: hidden;' +\\n            'position: relative;' +\\n            'resize: both;' +\\n            'z-index: 2;'\\n    );\\n\\n    function on_keyboard_event_closure(name) {\\n        return function (event) {\\n            return fig.key_event(event, name);\\n        };\\n    }\\n\\n    canvas_div.addEventListener(\\n        'keydown',\\n        on_keyboard_event_closure('key_press')\\n    );\\n    canvas_div.addEventListener(\\n        'keyup',\\n        on_keyboard_event_closure('key_release')\\n    );\\n\\n    this._canvas_extra_style(canvas_div);\\n    this.root.appendChild(canvas_div);\\n\\n    var canvas = (this.canvas = document.createElement('canvas'));\\n    canvas.classList.add('mpl-canvas');\\n    canvas.setAttribute(\\n        'style',\\n        'box-sizing: content-box;' +\\n            'pointer-events: none;' +\\n            'position: relative;' +\\n            'z-index: 0;'\\n    );\\n\\n    this.context = canvas.getContext('2d');\\n\\n    var backingStore =\\n        this.context.backingStorePixelRatio ||\\n        this.context.webkitBackingStorePixelRatio ||\\n        this.context.mozBackingStorePixelRatio ||\\n        this.context.msBackingStorePixelRatio ||\\n        this.context.oBackingStorePixelRatio ||\\n        this.context.backingStorePixelRatio ||\\n        1;\\n\\n    this.ratio = (window.devicePixelRatio || 1) / backingStore;\\n\\n    var rubberband_canvas = (this.rubberband_canvas = document.createElement(\\n        'canvas'\\n    ));\\n    rubberband_canvas.setAttribute(\\n        'style',\\n        'box-sizing: content-box;' +\\n            'left: 0;' +\\n            'pointer-events: none;' +\\n            'position: absolute;' +\\n            'top: 0;' +\\n            'z-index: 1;'\\n    );\\n\\n    // Apply a ponyfill if ResizeObserver is not implemented by browser.\\n    if (this.ResizeObserver === undefined) {\\n        if (window.ResizeObserver !== undefined) {\\n            this.ResizeObserver = window.ResizeObserver;\\n        } else {\\n            var obs = _JSXTOOLS_RESIZE_OBSERVER({});\\n            this.ResizeObserver = obs.ResizeObserver;\\n        }\\n    }\\n\\n    this.resizeObserverInstance = new this.ResizeObserver(function (entries) {\\n        var nentries = entries.length;\\n        for (var i = 0; i < nentries; i++) {\\n            var entry = entries[i];\\n            var width, height;\\n            if (entry.contentBoxSize) {\\n                if (entry.contentBoxSize instanceof Array) {\\n                    // Chrome 84 implements new version of spec.\\n                    width = entry.contentBoxSize[0].inlineSize;\\n                    height = entry.contentBoxSize[0].blockSize;\\n                } else {\\n                    // Firefox implements old version of spec.\\n                    width = entry.contentBoxSize.inlineSize;\\n                    height = entry.contentBoxSize.blockSize;\\n                }\\n            } else {\\n                // Chrome <84 implements even older version of spec.\\n                width = entry.contentRect.width;\\n                height = entry.contentRect.height;\\n            }\\n\\n            // Keep the size of the canvas and rubber band canvas in sync with\\n            // the canvas container.\\n            if (entry.devicePixelContentBoxSize) {\\n                // Chrome 84 implements new version of spec.\\n                canvas.setAttribute(\\n                    'width',\\n                    entry.devicePixelContentBoxSize[0].inlineSize\\n                );\\n                canvas.setAttribute(\\n                    'height',\\n                    entry.devicePixelContentBoxSize[0].blockSize\\n                );\\n            } else {\\n                canvas.setAttribute('width', width * fig.ratio);\\n                canvas.setAttribute('height', height * fig.ratio);\\n            }\\n            /* This rescales the canvas back to display pixels, so that it\\n             * appears correct on HiDPI screens. */\\n            canvas.style.width = width + 'px';\\n            canvas.style.height = height + 'px';\\n\\n            rubberband_canvas.setAttribute('width', width);\\n            rubberband_canvas.setAttribute('height', height);\\n\\n            // And update the size in Python. We ignore the initial 0/0 size\\n            // that occurs as the element is placed into the DOM, which should\\n            // otherwise not happen due to the minimum size styling.\\n            if (fig.ws.readyState == 1 && width != 0 && height != 0) {\\n                fig.request_resize(width, height);\\n            }\\n        }\\n    });\\n    this.resizeObserverInstance.observe(canvas_div);\\n\\n    function on_mouse_event_closure(name) {\\n        /* User Agent sniffing is bad, but WebKit is busted:\\n         * https://bugs.webkit.org/show_bug.cgi?id=144526\\n         * https://bugs.webkit.org/show_bug.cgi?id=181818\\n         * The worst that happens here is that they get an extra browser\\n         * selection when dragging, if this check fails to catch them.\\n         */\\n        var UA = navigator.userAgent;\\n        var isWebKit = /AppleWebKit/.test(UA) && !/Chrome/.test(UA);\\n        if(isWebKit) {\\n            return function (event) {\\n                /* This prevents the web browser from automatically changing to\\n                 * the text insertion cursor when the button is pressed. We\\n                 * want to control all of the cursor setting manually through\\n                 * the 'cursor' event from matplotlib */\\n                event.preventDefault()\\n                return fig.mouse_event(event, name);\\n            };\\n        } else {\\n            return function (event) {\\n                return fig.mouse_event(event, name);\\n            };\\n        }\\n    }\\n\\n    canvas_div.addEventListener(\\n        'mousedown',\\n        on_mouse_event_closure('button_press')\\n    );\\n    canvas_div.addEventListener(\\n        'mouseup',\\n        on_mouse_event_closure('button_release')\\n    );\\n    canvas_div.addEventListener(\\n        'dblclick',\\n        on_mouse_event_closure('dblclick')\\n    );\\n    // Throttle sequential mouse events to 1 every 20ms.\\n    canvas_div.addEventListener(\\n        'mousemove',\\n        on_mouse_event_closure('motion_notify')\\n    );\\n\\n    canvas_div.addEventListener(\\n        'mouseenter',\\n        on_mouse_event_closure('figure_enter')\\n    );\\n    canvas_div.addEventListener(\\n        'mouseleave',\\n        on_mouse_event_closure('figure_leave')\\n    );\\n\\n    canvas_div.addEventListener('wheel', function (event) {\\n        if (event.deltaY < 0) {\\n            event.step = 1;\\n        } else {\\n            event.step = -1;\\n        }\\n        on_mouse_event_closure('scroll')(event);\\n    });\\n\\n    canvas_div.appendChild(canvas);\\n    canvas_div.appendChild(rubberband_canvas);\\n\\n    this.rubberband_context = rubberband_canvas.getContext('2d');\\n    this.rubberband_context.strokeStyle = '#000000';\\n\\n    this._resize_canvas = function (width, height, forward) {\\n        if (forward) {\\n            canvas_div.style.width = width + 'px';\\n            canvas_div.style.height = height + 'px';\\n        }\\n    };\\n\\n    // Disable right mouse context menu.\\n    canvas_div.addEventListener('contextmenu', function (_e) {\\n        event.preventDefault();\\n        return false;\\n    });\\n\\n    function set_focus() {\\n        canvas.focus();\\n        canvas_div.focus();\\n    }\\n\\n    window.setTimeout(set_focus, 100);\\n};\\n\\nmpl.figure.prototype._init_toolbar = function () {\\n    var fig = this;\\n\\n    var toolbar = document.createElement('div');\\n    toolbar.classList = 'mpl-toolbar';\\n    this.root.appendChild(toolbar);\\n\\n    function on_click_closure(name) {\\n        return function (_event) {\\n            return fig.toolbar_button_onclick(name);\\n        };\\n    }\\n\\n    function on_mouseover_closure(tooltip) {\\n        return function (event) {\\n            if (!event.currentTarget.disabled) {\\n                return fig.toolbar_button_onmouseover(tooltip);\\n            }\\n        };\\n    }\\n\\n    fig.buttons = {};\\n    var buttonGroup = document.createElement('div');\\n    buttonGroup.classList = 'mpl-button-group';\\n    for (var toolbar_ind in mpl.toolbar_items) {\\n        var name = mpl.toolbar_items[toolbar_ind][0];\\n        var tooltip = mpl.toolbar_items[toolbar_ind][1];\\n        var image = mpl.toolbar_items[toolbar_ind][2];\\n        var method_name = mpl.toolbar_items[toolbar_ind][3];\\n\\n        if (!name) {\\n            /* Instead of a spacer, we start a new button group. */\\n            if (buttonGroup.hasChildNodes()) {\\n                toolbar.appendChild(buttonGroup);\\n            }\\n            buttonGroup = document.createElement('div');\\n            buttonGroup.classList = 'mpl-button-group';\\n            continue;\\n        }\\n\\n        var button = (fig.buttons[name] = document.createElement('button'));\\n        button.classList = 'mpl-widget';\\n        button.setAttribute('role', 'button');\\n        button.setAttribute('aria-disabled', 'false');\\n        button.addEventListener('click', on_click_closure(method_name));\\n        button.addEventListener('mouseover', on_mouseover_closure(tooltip));\\n\\n        var icon_img = document.createElement('img');\\n        icon_img.src = '_images/' + image + '.png';\\n        icon_img.srcset = '_images/' + image + '_large.png 2x';\\n        icon_img.alt = tooltip;\\n        button.appendChild(icon_img);\\n\\n        buttonGroup.appendChild(button);\\n    }\\n\\n    if (buttonGroup.hasChildNodes()) {\\n        toolbar.appendChild(buttonGroup);\\n    }\\n\\n    var fmt_picker = document.createElement('select');\\n    fmt_picker.classList = 'mpl-widget';\\n    toolbar.appendChild(fmt_picker);\\n    this.format_dropdown = fmt_picker;\\n\\n    for (var ind in mpl.extensions) {\\n        var fmt = mpl.extensions[ind];\\n        var option = document.createElement('option');\\n        option.selected = fmt === mpl.default_extension;\\n        option.innerHTML = fmt;\\n        fmt_picker.appendChild(option);\\n    }\\n\\n    var status_bar = document.createElement('span');\\n    status_bar.classList = 'mpl-message';\\n    toolbar.appendChild(status_bar);\\n    this.message = status_bar;\\n};\\n\\nmpl.figure.prototype.request_resize = function (x_pixels, y_pixels) {\\n    // Request matplotlib to resize the figure. Matplotlib will then trigger a resize in the client,\\n    // which will in turn request a refresh of the image.\\n    this.send_message('resize', { width: x_pixels, height: y_pixels });\\n};\\n\\nmpl.figure.prototype.send_message = function (type, properties) {\\n    properties['type'] = type;\\n    properties['figure_id'] = this.id;\\n    this.ws.send(JSON.stringify(properties));\\n};\\n\\nmpl.figure.prototype.send_draw_message = function () {\\n    if (!this.waiting) {\\n        this.waiting = true;\\n        this.ws.send(JSON.stringify({ type: 'draw', figure_id: this.id }));\\n    }\\n};\\n\\nmpl.figure.prototype.handle_save = function (fig, _msg) {\\n    var format_dropdown = fig.format_dropdown;\\n    var format = format_dropdown.options[format_dropdown.selectedIndex].value;\\n    fig.ondownload(fig, format);\\n};\\n\\nmpl.figure.prototype.handle_resize = function (fig, msg) {\\n    var size = msg['size'];\\n    if (size[0] !== fig.canvas.width || size[1] !== fig.canvas.height) {\\n        fig._resize_canvas(size[0], size[1], msg['forward']);\\n        fig.send_message('refresh', {});\\n    }\\n};\\n\\nmpl.figure.prototype.handle_rubberband = function (fig, msg) {\\n    var x0 = msg['x0'] / fig.ratio;\\n    var y0 = (fig.canvas.height - msg['y0']) / fig.ratio;\\n    var x1 = msg['x1'] / fig.ratio;\\n    var y1 = (fig.canvas.height - msg['y1']) / fig.ratio;\\n    x0 = Math.floor(x0) + 0.5;\\n    y0 = Math.floor(y0) + 0.5;\\n    x1 = Math.floor(x1) + 0.5;\\n    y1 = Math.floor(y1) + 0.5;\\n    var min_x = Math.min(x0, x1);\\n    var min_y = Math.min(y0, y1);\\n    var width = Math.abs(x1 - x0);\\n    var height = Math.abs(y1 - y0);\\n\\n    fig.rubberband_context.clearRect(\\n        0,\\n        0,\\n        fig.canvas.width / fig.ratio,\\n        fig.canvas.height / fig.ratio\\n    );\\n\\n    fig.rubberband_context.strokeRect(min_x, min_y, width, height);\\n};\\n\\nmpl.figure.prototype.handle_figure_label = function (fig, msg) {\\n    // Updates the figure title.\\n    fig.header.textContent = msg['label'];\\n};\\n\\nmpl.figure.prototype.handle_cursor = function (fig, msg) {\\n    fig.canvas_div.style.cursor = msg['cursor'];\\n};\\n\\nmpl.figure.prototype.handle_message = function (fig, msg) {\\n    fig.message.textContent = msg['message'];\\n};\\n\\nmpl.figure.prototype.handle_draw = function (fig, _msg) {\\n    // Request the server to send over a new figure.\\n    fig.send_draw_message();\\n};\\n\\nmpl.figure.prototype.handle_image_mode = function (fig, msg) {\\n    fig.image_mode = msg['mode'];\\n};\\n\\nmpl.figure.prototype.handle_history_buttons = function (fig, msg) {\\n    for (var key in msg) {\\n        if (!(key in fig.buttons)) {\\n            continue;\\n        }\\n        fig.buttons[key].disabled = !msg[key];\\n        fig.buttons[key].setAttribute('aria-disabled', !msg[key]);\\n    }\\n};\\n\\nmpl.figure.prototype.handle_navigate_mode = function (fig, msg) {\\n    if (msg['mode'] === 'PAN') {\\n        fig.buttons['Pan'].classList.add('active');\\n        fig.buttons['Zoom'].classList.remove('active');\\n    } else if (msg['mode'] === 'ZOOM') {\\n        fig.buttons['Pan'].classList.remove('active');\\n        fig.buttons['Zoom'].classList.add('active');\\n    } else {\\n        fig.buttons['Pan'].classList.remove('active');\\n        fig.buttons['Zoom'].classList.remove('active');\\n    }\\n};\\n\\nmpl.figure.prototype.updated_canvas_event = function () {\\n    // Called whenever the canvas gets updated.\\n    this.send_message('ack', {});\\n};\\n\\n// A function to construct a web socket function for onmessage handling.\\n// Called in the figure constructor.\\nmpl.figure.prototype._make_on_message_function = function (fig) {\\n    return function socket_on_message(evt) {\\n        if (evt.data instanceof Blob) {\\n            var img = evt.data;\\n            if (img.type !== 'image/png') {\\n                /* FIXME: We get \\\"Resource interpreted as Image but\\n                 * transferred with MIME type text/plain:\\\" errors on\\n                 * Chrome.  But how to set the MIME type?  It doesn't seem\\n                 * to be part of the websocket stream */\\n                img.type = 'image/png';\\n            }\\n\\n            /* Free the memory for the previous frames */\\n            if (fig.imageObj.src) {\\n                (window.URL || window.webkitURL).revokeObjectURL(\\n                    fig.imageObj.src\\n                );\\n            }\\n\\n            fig.imageObj.src = (window.URL || window.webkitURL).createObjectURL(\\n                img\\n            );\\n            fig.updated_canvas_event();\\n            fig.waiting = false;\\n            return;\\n        } else if (\\n            typeof evt.data === 'string' &&\\n            evt.data.slice(0, 21) === 'data:image/png;base64'\\n        ) {\\n            fig.imageObj.src = evt.data;\\n            fig.updated_canvas_event();\\n            fig.waiting = false;\\n            return;\\n        }\\n\\n        var msg = JSON.parse(evt.data);\\n        var msg_type = msg['type'];\\n\\n        // Call the  \\\"handle_{type}\\\" callback, which takes\\n        // the figure and JSON message as its only arguments.\\n        try {\\n            var callback = fig['handle_' + msg_type];\\n        } catch (e) {\\n            console.log(\\n                \\\"No handler for the '\\\" + msg_type + \\\"' message type: \\\",\\n                msg\\n            );\\n            return;\\n        }\\n\\n        if (callback) {\\n            try {\\n                // console.log(\\\"Handling '\\\" + msg_type + \\\"' message: \\\", msg);\\n                callback(fig, msg);\\n            } catch (e) {\\n                console.log(\\n                    \\\"Exception inside the 'handler_\\\" + msg_type + \\\"' callback:\\\",\\n                    e,\\n                    e.stack,\\n                    msg\\n                );\\n            }\\n        }\\n    };\\n};\\n\\nfunction getModifiers(event) {\\n    var mods = [];\\n    if (event.ctrlKey) {\\n        mods.push('ctrl');\\n    }\\n    if (event.altKey) {\\n        mods.push('alt');\\n    }\\n    if (event.shiftKey) {\\n        mods.push('shift');\\n    }\\n    if (event.metaKey) {\\n        mods.push('meta');\\n    }\\n    return mods;\\n}\\n\\n/*\\n * return a copy of an object with only non-object keys\\n * we need this to avoid circular references\\n * https://stackoverflow.com/a/24161582/3208463\\n */\\nfunction simpleKeys(original) {\\n    return Object.keys(original).reduce(function (obj, key) {\\n        if (typeof original[key] !== 'object') {\\n            obj[key] = original[key];\\n        }\\n        return obj;\\n    }, {});\\n}\\n\\nmpl.figure.prototype.mouse_event = function (event, name) {\\n    if (name === 'button_press') {\\n        this.canvas.focus();\\n        this.canvas_div.focus();\\n    }\\n\\n    // from https://stackoverflow.com/q/1114465\\n    var boundingRect = this.canvas.getBoundingClientRect();\\n    var x = (event.clientX - boundingRect.left) * this.ratio;\\n    var y = (event.clientY - boundingRect.top) * this.ratio;\\n\\n    this.send_message(name, {\\n        x: x,\\n        y: y,\\n        button: event.button,\\n        step: event.step,\\n        modifiers: getModifiers(event),\\n        guiEvent: simpleKeys(event),\\n    });\\n\\n    return false;\\n};\\n\\nmpl.figure.prototype._key_event_extra = function (_event, _name) {\\n    // Handle any extra behaviour associated with a key event\\n};\\n\\nmpl.figure.prototype.key_event = function (event, name) {\\n    // Prevent repeat events\\n    if (name === 'key_press') {\\n        if (event.key === this._key) {\\n            return;\\n        } else {\\n            this._key = event.key;\\n        }\\n    }\\n    if (name === 'key_release') {\\n        this._key = null;\\n    }\\n\\n    var value = '';\\n    if (event.ctrlKey && event.key !== 'Control') {\\n        value += 'ctrl+';\\n    }\\n    else if (event.altKey && event.key !== 'Alt') {\\n        value += 'alt+';\\n    }\\n    else if (event.shiftKey && event.key !== 'Shift') {\\n        value += 'shift+';\\n    }\\n\\n    value += 'k' + event.key;\\n\\n    this._key_event_extra(event, name);\\n\\n    this.send_message(name, { key: value, guiEvent: simpleKeys(event) });\\n    return false;\\n};\\n\\nmpl.figure.prototype.toolbar_button_onclick = function (name) {\\n    if (name === 'download') {\\n        this.handle_save(this, null);\\n    } else {\\n        this.send_message('toolbar_button', { name: name });\\n    }\\n};\\n\\nmpl.figure.prototype.toolbar_button_onmouseover = function (tooltip) {\\n    this.message.textContent = tooltip;\\n};\\n\\n///////////////// REMAINING CONTENT GENERATED BY embed_js.py /////////////////\\n// prettier-ignore\\nvar _JSXTOOLS_RESIZE_OBSERVER=function(A){var t,i=new WeakMap,n=new WeakMap,a=new WeakMap,r=new WeakMap,o=new Set;function s(e){if(!(this instanceof s))throw new TypeError(\\\"Constructor requires 'new' operator\\\");i.set(this,e)}function h(){throw new TypeError(\\\"Function is not a constructor\\\")}function c(e,t,i,n){e=0 in arguments?Number(arguments[0]):0,t=1 in arguments?Number(arguments[1]):0,i=2 in arguments?Number(arguments[2]):0,n=3 in arguments?Number(arguments[3]):0,this.right=(this.x=this.left=e)+(this.width=i),this.bottom=(this.y=this.top=t)+(this.height=n),Object.freeze(this)}function d(){t=requestAnimationFrame(d);var s=new WeakMap,p=new Set;o.forEach((function(t){r.get(t).forEach((function(i){var r=t instanceof window.SVGElement,o=a.get(t),d=r?0:parseFloat(o.paddingTop),f=r?0:parseFloat(o.paddingRight),l=r?0:parseFloat(o.paddingBottom),u=r?0:parseFloat(o.paddingLeft),g=r?0:parseFloat(o.borderTopWidth),m=r?0:parseFloat(o.borderRightWidth),w=r?0:parseFloat(o.borderBottomWidth),b=u+f,F=d+l,v=(r?0:parseFloat(o.borderLeftWidth))+m,W=g+w,y=r?0:t.offsetHeight-W-t.clientHeight,E=r?0:t.offsetWidth-v-t.clientWidth,R=b+v,z=F+W,M=r?t.width:parseFloat(o.width)-R-E,O=r?t.height:parseFloat(o.height)-z-y;if(n.has(t)){var k=n.get(t);if(k[0]===M&&k[1]===O)return}n.set(t,[M,O]);var S=Object.create(h.prototype);S.target=t,S.contentRect=new c(u,d,M,O),s.has(i)||(s.set(i,[]),p.add(i)),s.get(i).push(S)}))})),p.forEach((function(e){i.get(e).call(e,s.get(e),e)}))}return s.prototype.observe=function(i){if(i instanceof window.Element){r.has(i)||(r.set(i,new Set),o.add(i),a.set(i,window.getComputedStyle(i)));var n=r.get(i);n.has(this)||n.add(this),cancelAnimationFrame(t),t=requestAnimationFrame(d)}},s.prototype.unobserve=function(i){if(i instanceof window.Element&&r.has(i)){var n=r.get(i);n.has(this)&&(n.delete(this),n.size||(r.delete(i),o.delete(i))),n.size||r.delete(i),o.size||cancelAnimationFrame(t)}},A.DOMRectReadOnly=c,A.ResizeObserver=s,A.ResizeObserverEntry=h,A}; // eslint-disable-line\\nmpl.toolbar_items = [[\\\"Home\\\", \\\"Reset original view\\\", \\\"fa fa-home\\\", \\\"home\\\"], [\\\"Back\\\", \\\"Back to previous view\\\", \\\"fa fa-arrow-left\\\", \\\"back\\\"], [\\\"Forward\\\", \\\"Forward to next view\\\", \\\"fa fa-arrow-right\\\", \\\"forward\\\"], [\\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\"], [\\\"Pan\\\", \\\"Left button pans, Right button zooms\\\\nx/y fixes axis, CTRL fixes aspect\\\", \\\"fa fa-arrows\\\", \\\"pan\\\"], [\\\"Zoom\\\", \\\"Zoom to rectangle\\\\nx/y fixes axis\\\", \\\"fa fa-square-o\\\", \\\"zoom\\\"], [\\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\"], [\\\"Download\\\", \\\"Download plot\\\", \\\"fa fa-floppy-o\\\", \\\"download\\\"]];\\n\\nmpl.extensions = [\\\"eps\\\", \\\"jpeg\\\", \\\"pgf\\\", \\\"pdf\\\", \\\"png\\\", \\\"ps\\\", \\\"raw\\\", \\\"svg\\\", \\\"tif\\\", \\\"webp\\\"];\\n\\nmpl.default_extension = \\\"png\\\";/* global mpl */\\n\\nvar comm_websocket_adapter = function (comm) {\\n    // Create a \\\"websocket\\\"-like object which calls the given IPython comm\\n    // object with the appropriate methods. Currently this is a non binary\\n    // socket, so there is still some room for performance tuning.\\n    var ws = {};\\n\\n    ws.binaryType = comm.kernel.ws.binaryType;\\n    ws.readyState = comm.kernel.ws.readyState;\\n    function updateReadyState(_event) {\\n        if (comm.kernel.ws) {\\n            ws.readyState = comm.kernel.ws.readyState;\\n        } else {\\n            ws.readyState = 3; // Closed state.\\n        }\\n    }\\n    comm.kernel.ws.addEventListener('open', updateReadyState);\\n    comm.kernel.ws.addEventListener('close', updateReadyState);\\n    comm.kernel.ws.addEventListener('error', updateReadyState);\\n\\n    ws.close = function () {\\n        comm.close();\\n    };\\n    ws.send = function (m) {\\n        //console.log('sending', m);\\n        comm.send(m);\\n    };\\n    // Register the callback with on_msg.\\n    comm.on_msg(function (msg) {\\n        //console.log('receiving', msg['content']['data'], msg);\\n        var data = msg['content']['data'];\\n        if (data['blob'] !== undefined) {\\n            data = {\\n                data: new Blob(msg['buffers'], { type: data['blob'] }),\\n            };\\n        }\\n        // Pass the mpl event to the overridden (by mpl) onmessage function.\\n        ws.onmessage(data);\\n    });\\n    return ws;\\n};\\n\\nmpl.mpl_figure_comm = function (comm, msg) {\\n    // This is the function which gets called when the mpl process\\n    // starts-up an IPython Comm through the \\\"matplotlib\\\" channel.\\n\\n    var id = msg.content.data.id;\\n    // Get hold of the div created by the display call when the Comm\\n    // socket was opened in Python.\\n    var element = document.getElementById(id);\\n    var ws_proxy = comm_websocket_adapter(comm);\\n\\n    function ondownload(figure, _format) {\\n        window.open(figure.canvas.toDataURL());\\n    }\\n\\n    var fig = new mpl.figure(id, ws_proxy, ondownload, element);\\n\\n    // Call onopen now - mpl needs it, as it is assuming we've passed it a real\\n    // web socket which is closed, not our websocket->open comm proxy.\\n    ws_proxy.onopen();\\n\\n    fig.parent_element = element;\\n    fig.cell_info = mpl.find_output_cell(\\\"<div id='\\\" + id + \\\"'></div>\\\");\\n    if (!fig.cell_info) {\\n        console.error('Failed to find cell for figure', id, fig);\\n        return;\\n    }\\n    fig.cell_info[0].output_area.element.on(\\n        'cleared',\\n        { fig: fig },\\n        fig._remove_fig_handler\\n    );\\n};\\n\\nmpl.figure.prototype.handle_close = function (fig, msg) {\\n    var width = fig.canvas.width / fig.ratio;\\n    fig.cell_info[0].output_area.element.off(\\n        'cleared',\\n        fig._remove_fig_handler\\n    );\\n    fig.resizeObserverInstance.unobserve(fig.canvas_div);\\n\\n    // Update the output cell to use the data from the current canvas.\\n    fig.push_to_output();\\n    var dataURL = fig.canvas.toDataURL();\\n    // Re-enable the keyboard manager in IPython - without this line, in FF,\\n    // the notebook keyboard shortcuts fail.\\n    IPython.keyboard_manager.enable();\\n    fig.parent_element.innerHTML =\\n        '<img src=\\\"' + dataURL + '\\\" width=\\\"' + width + '\\\">';\\n    fig.close_ws(fig, msg);\\n};\\n\\nmpl.figure.prototype.close_ws = function (fig, msg) {\\n    fig.send_message('closing', msg);\\n    // fig.ws.close()\\n};\\n\\nmpl.figure.prototype.push_to_output = function (_remove_interactive) {\\n    // Turn the data on the canvas into data in the output cell.\\n    var width = this.canvas.width / this.ratio;\\n    var dataURL = this.canvas.toDataURL();\\n    this.cell_info[1]['text/html'] =\\n        '<img src=\\\"' + dataURL + '\\\" width=\\\"' + width + '\\\">';\\n};\\n\\nmpl.figure.prototype.updated_canvas_event = function () {\\n    // Tell IPython that the notebook contents must change.\\n    IPython.notebook.set_dirty(true);\\n    this.send_message('ack', {});\\n    var fig = this;\\n    // Wait a second, then push the new image to the DOM so\\n    // that it is saved nicely (might be nice to debounce this).\\n    setTimeout(function () {\\n        fig.push_to_output();\\n    }, 1000);\\n};\\n\\nmpl.figure.prototype._init_toolbar = function () {\\n    var fig = this;\\n\\n    var toolbar = document.createElement('div');\\n    toolbar.classList = 'btn-toolbar';\\n    this.root.appendChild(toolbar);\\n\\n    function on_click_closure(name) {\\n        return function (_event) {\\n            return fig.toolbar_button_onclick(name);\\n        };\\n    }\\n\\n    function on_mouseover_closure(tooltip) {\\n        return function (event) {\\n            if (!event.currentTarget.disabled) {\\n                return fig.toolbar_button_onmouseover(tooltip);\\n            }\\n        };\\n    }\\n\\n    fig.buttons = {};\\n    var buttonGroup = document.createElement('div');\\n    buttonGroup.classList = 'btn-group';\\n    var button;\\n    for (var toolbar_ind in mpl.toolbar_items) {\\n        var name = mpl.toolbar_items[toolbar_ind][0];\\n        var tooltip = mpl.toolbar_items[toolbar_ind][1];\\n        var image = mpl.toolbar_items[toolbar_ind][2];\\n        var method_name = mpl.toolbar_items[toolbar_ind][3];\\n\\n        if (!name) {\\n            /* Instead of a spacer, we start a new button group. */\\n            if (buttonGroup.hasChildNodes()) {\\n                toolbar.appendChild(buttonGroup);\\n            }\\n            buttonGroup = document.createElement('div');\\n            buttonGroup.classList = 'btn-group';\\n            continue;\\n        }\\n\\n        button = fig.buttons[name] = document.createElement('button');\\n        button.classList = 'btn btn-default';\\n        button.href = '#';\\n        button.title = name;\\n        button.innerHTML = '<i class=\\\"fa ' + image + ' fa-lg\\\"></i>';\\n        button.addEventListener('click', on_click_closure(method_name));\\n        button.addEventListener('mouseover', on_mouseover_closure(tooltip));\\n        buttonGroup.appendChild(button);\\n    }\\n\\n    if (buttonGroup.hasChildNodes()) {\\n        toolbar.appendChild(buttonGroup);\\n    }\\n\\n    // Add the status bar.\\n    var status_bar = document.createElement('span');\\n    status_bar.classList = 'mpl-message pull-right';\\n    toolbar.appendChild(status_bar);\\n    this.message = status_bar;\\n\\n    // Add the close button to the window.\\n    var buttongrp = document.createElement('div');\\n    buttongrp.classList = 'btn-group inline pull-right';\\n    button = document.createElement('button');\\n    button.classList = 'btn btn-mini btn-primary';\\n    button.href = '#';\\n    button.title = 'Stop Interaction';\\n    button.innerHTML = '<i class=\\\"fa fa-power-off icon-remove icon-large\\\"></i>';\\n    button.addEventListener('click', function (_evt) {\\n        fig.handle_close(fig, {});\\n    });\\n    button.addEventListener(\\n        'mouseover',\\n        on_mouseover_closure('Stop Interaction')\\n    );\\n    buttongrp.appendChild(button);\\n    var titlebar = this.root.querySelector('.ui-dialog-titlebar');\\n    titlebar.insertBefore(buttongrp, titlebar.firstChild);\\n};\\n\\nmpl.figure.prototype._remove_fig_handler = function (event) {\\n    var fig = event.data.fig;\\n    if (event.target !== this) {\\n        // Ignore bubbled events from children.\\n        return;\\n    }\\n    fig.close_ws(fig, {});\\n};\\n\\nmpl.figure.prototype._root_extra_style = function (el) {\\n    el.style.boxSizing = 'content-box'; // override notebook setting of border-box.\\n};\\n\\nmpl.figure.prototype._canvas_extra_style = function (el) {\\n    // this is important to make the div 'focusable\\n    el.setAttribute('tabindex', 0);\\n    // reach out to IPython and tell the keyboard manager to turn it's self\\n    // off when our div gets focus\\n\\n    // location in version 3\\n    if (IPython.notebook.keyboard_manager) {\\n        IPython.notebook.keyboard_manager.register_events(el);\\n    } else {\\n        // location in version 2\\n        IPython.keyboard_manager.register_events(el);\\n    }\\n};\\n\\nmpl.figure.prototype._key_event_extra = function (event, _name) {\\n    // Check for shift+enter\\n    if (event.shiftKey && event.which === 13) {\\n        this.canvas_div.blur();\\n        // select the cell after this one\\n        var index = IPython.notebook.find_cell_index(this.cell_info[0]);\\n        IPython.notebook.select(index + 1);\\n    }\\n};\\n\\nmpl.figure.prototype.handle_save = function (fig, _msg) {\\n    fig.ondownload(fig, null);\\n};\\n\\nmpl.find_output_cell = function (html_output) {\\n    // Return the cell and output element which can be found *uniquely* in the notebook.\\n    // Note - this is a bit hacky, but it is done because the \\\"notebook_saving.Notebook\\\"\\n    // IPython event is triggered only after the cells have been serialised, which for\\n    // our purposes (turning an active figure into a static one), is too late.\\n    var cells = IPython.notebook.get_cells();\\n    var ncells = cells.length;\\n    for (var i = 0; i < ncells; i++) {\\n        var cell = cells[i];\\n        if (cell.cell_type === 'code') {\\n            for (var j = 0; j < cell.output_area.outputs.length; j++) {\\n                var data = cell.output_area.outputs[j];\\n                if (data.data) {\\n                    // IPython >= 3 moved mimebundle to data attribute of output\\n                    data = data.data;\\n                }\\n                if (data['text/html'] === html_output) {\\n                    return [cell, data, j];\\n                }\\n            }\\n        }\\n    }\\n};\\n\\n// Register the function which deals with the matplotlib target/channel.\\n// The kernel may be null if the page has been refreshed.\\nif (IPython.notebook.kernel !== null) {\\n    IPython.notebook.kernel.comm_manager.register_target(\\n        'matplotlib',\\n        mpl.mpl_figure_comm\\n    );\\n}\\n\"\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"data\": {\n      \"text/plain\": \"<IPython.core.display.HTML object>\",\n      \"text/html\": \"<div id='cc8f39a4-9ec6-4857-b8fe-5e077bfedf04'></div>\"\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"data\": {\n      \"text/plain\": \"[<matplotlib.lines.Line2D at 0x142184f50>]\"\n     },\n     \"execution_count\": 109,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"Fs = 10 #sampling rate 1ns에 10번 \\n\",\n    \"N = 500\\n\",\n    \"time = np.arange(N+1)/Fs \\n\",\n    \"    #freq = np.fft.fftfreq(N+1,d=1/Fs)\\n\",\n    \"NW =  3   # Time-halfbandwidth product\\n\",\n    \"    # Generating the Slepian sequences\\n\",\n    \"slepian_sequence = dpss(N+1, NW)\\n\",\n    \"slepian_sequence2 = dpss(N+1, 6)\\n\",\n    \"fig, ax = plt.subplots()\\n\",\n    \"ax.plot(slepian_sequence)\\n\",\n    \"ax.plot(slepian_sequence2)\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T22:43:39.109701Z\",\n     \"start_time\": \"2023-12-07T22:43:39.099828Z\"\n    }\n   },\n   \"id\": \"d52ea56db17f31c3\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 108,\n   \"outputs\": [],\n   \"source\": [\n    \"#Setting\\n\",\n    \"omega1 = 0.01 * 2 * np.pi #10MHz\\n\",\n    \"omega2 = 0.01 * 2 * np.pi #10MHz\\n\",\n    \"V1=1.\\n\",\n    \"V2=1. #unit?\\n\",\n    \"delta_omega1 = 0.001 * 2 * np.pi #1MHz #qubit frequency and driving frequency\\n\",\n    \"delta_omega2 = 0.001 * 2 * np.pi #1MHz\\n\",\n    \"delta_q12 = 1 * 2 * np.pi # 1GHz\\n\",\n    \"phi1 = 0.001\\n\",\n    \"phi2 = 0.001\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T22:43:23.424641Z\",\n     \"start_time\": \"2023-12-07T22:43:23.421376Z\"\n    }\n   },\n   \"id\": \"6be19978740e9cfa\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 101,\n   \"outputs\": [],\n   \"source\": [\n    \"H_int = make_H_int(g=g,delta_omega=delta_omega2) \\n\",\n    \"H_d1 = make_H_d1(Omega=omega1, V_0=V1,delta_omega=delta_omega1,s=slepian,phi=phi1)\\n\",\n    \"H_d2 = make_H_d2(Omega=omega2, V_0=V2,delta_omega=delta_omega2,s=slepian,phi=phi2)\\n\",\n    \"def H(t):\\n\",\n    \"    return H_int(t)+H_d1(t)+H_d2(t)\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T21:33:52.537899Z\",\n     \"start_time\": \"2023-12-07T21:33:52.536048Z\"\n    }\n   },\n   \"id\": \"9b3f01420ab73855\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 102,\n   \"outputs\": [],\n   \"source\": [\n    \"U = make_U(H, time_step=1e-4)\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T21:33:53.121697Z\",\n     \"start_time\": \"2023-12-07T21:33:53.118863Z\"\n    }\n   },\n   \"id\": \"586da179c863d67b\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 122,\n   \"outputs\": [],\n   \"source\": [\n    \"Uhigh = make_U(H, time_step=1e-5)\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T23:00:37.938602Z\",\n     \"start_time\": \"2023-12-07T23:00:37.930153Z\"\n    }\n   },\n   \"id\": \"f5504cafd83f15ff\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 111,\n   \"outputs\": [],\n   \"source\": [\n    \"transition, info = U(50.) #한번 돌리는데 4분30초...GPU로 계산하면 더 빠른가?\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T22:50:48.901062Z\",\n     \"start_time\": \"2023-12-07T22:46:22.124744Z\"\n    }\n   },\n   \"id\": \"2b135f0461b55d\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 123,\n   \"outputs\": [],\n   \"source\": [\n    \"transition2, info2 = Uhigh(50.) #47분 미쳤네 \"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T23:47:42.744108Z\",\n     \"start_time\": \"2023-12-07T23:00:45.712343Z\"\n    }\n   },\n   \"id\": \"3cf66ad789534d34\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 124,\n   \"outputs\": [],\n   \"source\": [\n    \"np.save('1e-5_info.npy',info2)\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T23:51:39.938833Z\",\n     \"start_time\": \"2023-12-07T23:51:39.607019Z\"\n    }\n   },\n   \"id\": \"35638968121f626a\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 129,\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": \"<IPython.core.display.Javascript object>\",\n      \"application/javascript\": \"/* Put everything inside the global mpl namespace */\\n/* global mpl */\\nwindow.mpl = {};\\n\\nmpl.get_websocket_type = function () {\\n    if (typeof WebSocket !== 'undefined') {\\n        return WebSocket;\\n    } else if (typeof MozWebSocket !== 'undefined') {\\n        return MozWebSocket;\\n    } else {\\n        alert(\\n            'Your browser does not have WebSocket support. ' +\\n                'Please try Chrome, Safari or Firefox ≥ 6. ' +\\n                'Firefox 4 and 5 are also supported but you ' +\\n                'have to enable WebSockets in about:config.'\\n        );\\n    }\\n};\\n\\nmpl.figure = function (figure_id, websocket, ondownload, parent_element) {\\n    this.id = figure_id;\\n\\n    this.ws = websocket;\\n\\n    this.supports_binary = this.ws.binaryType !== undefined;\\n\\n    if (!this.supports_binary) {\\n        var warnings = document.getElementById('mpl-warnings');\\n        if (warnings) {\\n            warnings.style.display = 'block';\\n            warnings.textContent =\\n                'This browser does not support binary websocket messages. ' +\\n                'Performance may be slow.';\\n        }\\n    }\\n\\n    this.imageObj = new Image();\\n\\n    this.context = undefined;\\n    this.message = undefined;\\n    this.canvas = undefined;\\n    this.rubberband_canvas = undefined;\\n    this.rubberband_context = undefined;\\n    this.format_dropdown = undefined;\\n\\n    this.image_mode = 'full';\\n\\n    this.root = document.createElement('div');\\n    this.root.setAttribute('style', 'display: inline-block');\\n    this._root_extra_style(this.root);\\n\\n    parent_element.appendChild(this.root);\\n\\n    this._init_header(this);\\n    this._init_canvas(this);\\n    this._init_toolbar(this);\\n\\n    var fig = this;\\n\\n    this.waiting = false;\\n\\n    this.ws.onopen = function () {\\n        fig.send_message('supports_binary', { value: fig.supports_binary });\\n        fig.send_message('send_image_mode', {});\\n        if (fig.ratio !== 1) {\\n            fig.send_message('set_device_pixel_ratio', {\\n                device_pixel_ratio: fig.ratio,\\n            });\\n        }\\n        fig.send_message('refresh', {});\\n    };\\n\\n    this.imageObj.onload = function () {\\n        if (fig.image_mode === 'full') {\\n            // Full images could contain transparency (where diff images\\n            // almost always do), so we need to clear the canvas so that\\n            // there is no ghosting.\\n            fig.context.clearRect(0, 0, fig.canvas.width, fig.canvas.height);\\n        }\\n        fig.context.drawImage(fig.imageObj, 0, 0);\\n    };\\n\\n    this.imageObj.onunload = function () {\\n        fig.ws.close();\\n    };\\n\\n    this.ws.onmessage = this._make_on_message_function(this);\\n\\n    this.ondownload = ondownload;\\n};\\n\\nmpl.figure.prototype._init_header = function () {\\n    var titlebar = document.createElement('div');\\n    titlebar.classList =\\n        'ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix';\\n    var titletext = document.createElement('div');\\n    titletext.classList = 'ui-dialog-title';\\n    titletext.setAttribute(\\n        'style',\\n        'width: 100%; text-align: center; padding: 3px;'\\n    );\\n    titlebar.appendChild(titletext);\\n    this.root.appendChild(titlebar);\\n    this.header = titletext;\\n};\\n\\nmpl.figure.prototype._canvas_extra_style = function (_canvas_div) {};\\n\\nmpl.figure.prototype._root_extra_style = function (_canvas_div) {};\\n\\nmpl.figure.prototype._init_canvas = function () {\\n    var fig = this;\\n\\n    var canvas_div = (this.canvas_div = document.createElement('div'));\\n    canvas_div.setAttribute('tabindex', '0');\\n    canvas_div.setAttribute(\\n        'style',\\n        'border: 1px solid #ddd;' +\\n            'box-sizing: content-box;' +\\n            'clear: both;' +\\n            'min-height: 1px;' +\\n            'min-width: 1px;' +\\n            'outline: 0;' +\\n            'overflow: hidden;' +\\n            'position: relative;' +\\n            'resize: both;' +\\n            'z-index: 2;'\\n    );\\n\\n    function on_keyboard_event_closure(name) {\\n        return function (event) {\\n            return fig.key_event(event, name);\\n        };\\n    }\\n\\n    canvas_div.addEventListener(\\n        'keydown',\\n        on_keyboard_event_closure('key_press')\\n    );\\n    canvas_div.addEventListener(\\n        'keyup',\\n        on_keyboard_event_closure('key_release')\\n    );\\n\\n    this._canvas_extra_style(canvas_div);\\n    this.root.appendChild(canvas_div);\\n\\n    var canvas = (this.canvas = document.createElement('canvas'));\\n    canvas.classList.add('mpl-canvas');\\n    canvas.setAttribute(\\n        'style',\\n        'box-sizing: content-box;' +\\n            'pointer-events: none;' +\\n            'position: relative;' +\\n            'z-index: 0;'\\n    );\\n\\n    this.context = canvas.getContext('2d');\\n\\n    var backingStore =\\n        this.context.backingStorePixelRatio ||\\n        this.context.webkitBackingStorePixelRatio ||\\n        this.context.mozBackingStorePixelRatio ||\\n        this.context.msBackingStorePixelRatio ||\\n        this.context.oBackingStorePixelRatio ||\\n        this.context.backingStorePixelRatio ||\\n        1;\\n\\n    this.ratio = (window.devicePixelRatio || 1) / backingStore;\\n\\n    var rubberband_canvas = (this.rubberband_canvas = document.createElement(\\n        'canvas'\\n    ));\\n    rubberband_canvas.setAttribute(\\n        'style',\\n        'box-sizing: content-box;' +\\n            'left: 0;' +\\n            'pointer-events: none;' +\\n            'position: absolute;' +\\n            'top: 0;' +\\n            'z-index: 1;'\\n    );\\n\\n    // Apply a ponyfill if ResizeObserver is not implemented by browser.\\n    if (this.ResizeObserver === undefined) {\\n        if (window.ResizeObserver !== undefined) {\\n            this.ResizeObserver = window.ResizeObserver;\\n        } else {\\n            var obs = _JSXTOOLS_RESIZE_OBSERVER({});\\n            this.ResizeObserver = obs.ResizeObserver;\\n        }\\n    }\\n\\n    this.resizeObserverInstance = new this.ResizeObserver(function (entries) {\\n        var nentries = entries.length;\\n        for (var i = 0; i < nentries; i++) {\\n            var entry = entries[i];\\n            var width, height;\\n            if (entry.contentBoxSize) {\\n                if (entry.contentBoxSize instanceof Array) {\\n                    // Chrome 84 implements new version of spec.\\n                    width = entry.contentBoxSize[0].inlineSize;\\n                    height = entry.contentBoxSize[0].blockSize;\\n                } else {\\n                    // Firefox implements old version of spec.\\n                    width = entry.contentBoxSize.inlineSize;\\n                    height = entry.contentBoxSize.blockSize;\\n                }\\n            } else {\\n                // Chrome <84 implements even older version of spec.\\n                width = entry.contentRect.width;\\n                height = entry.contentRect.height;\\n            }\\n\\n            // Keep the size of the canvas and rubber band canvas in sync with\\n            // the canvas container.\\n            if (entry.devicePixelContentBoxSize) {\\n                // Chrome 84 implements new version of spec.\\n                canvas.setAttribute(\\n                    'width',\\n                    entry.devicePixelContentBoxSize[0].inlineSize\\n                );\\n                canvas.setAttribute(\\n                    'height',\\n                    entry.devicePixelContentBoxSize[0].blockSize\\n                );\\n            } else {\\n                canvas.setAttribute('width', width * fig.ratio);\\n                canvas.setAttribute('height', height * fig.ratio);\\n            }\\n            /* This rescales the canvas back to display pixels, so that it\\n             * appears correct on HiDPI screens. */\\n            canvas.style.width = width + 'px';\\n            canvas.style.height = height + 'px';\\n\\n            rubberband_canvas.setAttribute('width', width);\\n            rubberband_canvas.setAttribute('height', height);\\n\\n            // And update the size in Python. We ignore the initial 0/0 size\\n            // that occurs as the element is placed into the DOM, which should\\n            // otherwise not happen due to the minimum size styling.\\n            if (fig.ws.readyState == 1 && width != 0 && height != 0) {\\n                fig.request_resize(width, height);\\n            }\\n        }\\n    });\\n    this.resizeObserverInstance.observe(canvas_div);\\n\\n    function on_mouse_event_closure(name) {\\n        /* User Agent sniffing is bad, but WebKit is busted:\\n         * https://bugs.webkit.org/show_bug.cgi?id=144526\\n         * https://bugs.webkit.org/show_bug.cgi?id=181818\\n         * The worst that happens here is that they get an extra browser\\n         * selection when dragging, if this check fails to catch them.\\n         */\\n        var UA = navigator.userAgent;\\n        var isWebKit = /AppleWebKit/.test(UA) && !/Chrome/.test(UA);\\n        if(isWebKit) {\\n            return function (event) {\\n                /* This prevents the web browser from automatically changing to\\n                 * the text insertion cursor when the button is pressed. We\\n                 * want to control all of the cursor setting manually through\\n                 * the 'cursor' event from matplotlib */\\n                event.preventDefault()\\n                return fig.mouse_event(event, name);\\n            };\\n        } else {\\n            return function (event) {\\n                return fig.mouse_event(event, name);\\n            };\\n        }\\n    }\\n\\n    canvas_div.addEventListener(\\n        'mousedown',\\n        on_mouse_event_closure('button_press')\\n    );\\n    canvas_div.addEventListener(\\n        'mouseup',\\n        on_mouse_event_closure('button_release')\\n    );\\n    canvas_div.addEventListener(\\n        'dblclick',\\n        on_mouse_event_closure('dblclick')\\n    );\\n    // Throttle sequential mouse events to 1 every 20ms.\\n    canvas_div.addEventListener(\\n        'mousemove',\\n        on_mouse_event_closure('motion_notify')\\n    );\\n\\n    canvas_div.addEventListener(\\n        'mouseenter',\\n        on_mouse_event_closure('figure_enter')\\n    );\\n    canvas_div.addEventListener(\\n        'mouseleave',\\n        on_mouse_event_closure('figure_leave')\\n    );\\n\\n    canvas_div.addEventListener('wheel', function (event) {\\n        if (event.deltaY < 0) {\\n            event.step = 1;\\n        } else {\\n            event.step = -1;\\n        }\\n        on_mouse_event_closure('scroll')(event);\\n    });\\n\\n    canvas_div.appendChild(canvas);\\n    canvas_div.appendChild(rubberband_canvas);\\n\\n    this.rubberband_context = rubberband_canvas.getContext('2d');\\n    this.rubberband_context.strokeStyle = '#000000';\\n\\n    this._resize_canvas = function (width, height, forward) {\\n        if (forward) {\\n            canvas_div.style.width = width + 'px';\\n            canvas_div.style.height = height + 'px';\\n        }\\n    };\\n\\n    // Disable right mouse context menu.\\n    canvas_div.addEventListener('contextmenu', function (_e) {\\n        event.preventDefault();\\n        return false;\\n    });\\n\\n    function set_focus() {\\n        canvas.focus();\\n        canvas_div.focus();\\n    }\\n\\n    window.setTimeout(set_focus, 100);\\n};\\n\\nmpl.figure.prototype._init_toolbar = function () {\\n    var fig = this;\\n\\n    var toolbar = document.createElement('div');\\n    toolbar.classList = 'mpl-toolbar';\\n    this.root.appendChild(toolbar);\\n\\n    function on_click_closure(name) {\\n        return function (_event) {\\n            return fig.toolbar_button_onclick(name);\\n        };\\n    }\\n\\n    function on_mouseover_closure(tooltip) {\\n        return function (event) {\\n            if (!event.currentTarget.disabled) {\\n                return fig.toolbar_button_onmouseover(tooltip);\\n            }\\n        };\\n    }\\n\\n    fig.buttons = {};\\n    var buttonGroup = document.createElement('div');\\n    buttonGroup.classList = 'mpl-button-group';\\n    for (var toolbar_ind in mpl.toolbar_items) {\\n        var name = mpl.toolbar_items[toolbar_ind][0];\\n        var tooltip = mpl.toolbar_items[toolbar_ind][1];\\n        var image = mpl.toolbar_items[toolbar_ind][2];\\n        var method_name = mpl.toolbar_items[toolbar_ind][3];\\n\\n        if (!name) {\\n            /* Instead of a spacer, we start a new button group. */\\n            if (buttonGroup.hasChildNodes()) {\\n                toolbar.appendChild(buttonGroup);\\n            }\\n            buttonGroup = document.createElement('div');\\n            buttonGroup.classList = 'mpl-button-group';\\n            continue;\\n        }\\n\\n        var button = (fig.buttons[name] = document.createElement('button'));\\n        button.classList = 'mpl-widget';\\n        button.setAttribute('role', 'button');\\n        button.setAttribute('aria-disabled', 'false');\\n        button.addEventListener('click', on_click_closure(method_name));\\n        button.addEventListener('mouseover', on_mouseover_closure(tooltip));\\n\\n        var icon_img = document.createElement('img');\\n        icon_img.src = '_images/' + image + '.png';\\n        icon_img.srcset = '_images/' + image + '_large.png 2x';\\n        icon_img.alt = tooltip;\\n        button.appendChild(icon_img);\\n\\n        buttonGroup.appendChild(button);\\n    }\\n\\n    if (buttonGroup.hasChildNodes()) {\\n        toolbar.appendChild(buttonGroup);\\n    }\\n\\n    var fmt_picker = document.createElement('select');\\n    fmt_picker.classList = 'mpl-widget';\\n    toolbar.appendChild(fmt_picker);\\n    this.format_dropdown = fmt_picker;\\n\\n    for (var ind in mpl.extensions) {\\n        var fmt = mpl.extensions[ind];\\n        var option = document.createElement('option');\\n        option.selected = fmt === mpl.default_extension;\\n        option.innerHTML = fmt;\\n        fmt_picker.appendChild(option);\\n    }\\n\\n    var status_bar = document.createElement('span');\\n    status_bar.classList = 'mpl-message';\\n    toolbar.appendChild(status_bar);\\n    this.message = status_bar;\\n};\\n\\nmpl.figure.prototype.request_resize = function (x_pixels, y_pixels) {\\n    // Request matplotlib to resize the figure. Matplotlib will then trigger a resize in the client,\\n    // which will in turn request a refresh of the image.\\n    this.send_message('resize', { width: x_pixels, height: y_pixels });\\n};\\n\\nmpl.figure.prototype.send_message = function (type, properties) {\\n    properties['type'] = type;\\n    properties['figure_id'] = this.id;\\n    this.ws.send(JSON.stringify(properties));\\n};\\n\\nmpl.figure.prototype.send_draw_message = function () {\\n    if (!this.waiting) {\\n        this.waiting = true;\\n        this.ws.send(JSON.stringify({ type: 'draw', figure_id: this.id }));\\n    }\\n};\\n\\nmpl.figure.prototype.handle_save = function (fig, _msg) {\\n    var format_dropdown = fig.format_dropdown;\\n    var format = format_dropdown.options[format_dropdown.selectedIndex].value;\\n    fig.ondownload(fig, format);\\n};\\n\\nmpl.figure.prototype.handle_resize = function (fig, msg) {\\n    var size = msg['size'];\\n    if (size[0] !== fig.canvas.width || size[1] !== fig.canvas.height) {\\n        fig._resize_canvas(size[0], size[1], msg['forward']);\\n        fig.send_message('refresh', {});\\n    }\\n};\\n\\nmpl.figure.prototype.handle_rubberband = function (fig, msg) {\\n    var x0 = msg['x0'] / fig.ratio;\\n    var y0 = (fig.canvas.height - msg['y0']) / fig.ratio;\\n    var x1 = msg['x1'] / fig.ratio;\\n    var y1 = (fig.canvas.height - msg['y1']) / fig.ratio;\\n    x0 = Math.floor(x0) + 0.5;\\n    y0 = Math.floor(y0) + 0.5;\\n    x1 = Math.floor(x1) + 0.5;\\n    y1 = Math.floor(y1) + 0.5;\\n    var min_x = Math.min(x0, x1);\\n    var min_y = Math.min(y0, y1);\\n    var width = Math.abs(x1 - x0);\\n    var height = Math.abs(y1 - y0);\\n\\n    fig.rubberband_context.clearRect(\\n        0,\\n        0,\\n        fig.canvas.width / fig.ratio,\\n        fig.canvas.height / fig.ratio\\n    );\\n\\n    fig.rubberband_context.strokeRect(min_x, min_y, width, height);\\n};\\n\\nmpl.figure.prototype.handle_figure_label = function (fig, msg) {\\n    // Updates the figure title.\\n    fig.header.textContent = msg['label'];\\n};\\n\\nmpl.figure.prototype.handle_cursor = function (fig, msg) {\\n    fig.canvas_div.style.cursor = msg['cursor'];\\n};\\n\\nmpl.figure.prototype.handle_message = function (fig, msg) {\\n    fig.message.textContent = msg['message'];\\n};\\n\\nmpl.figure.prototype.handle_draw = function (fig, _msg) {\\n    // Request the server to send over a new figure.\\n    fig.send_draw_message();\\n};\\n\\nmpl.figure.prototype.handle_image_mode = function (fig, msg) {\\n    fig.image_mode = msg['mode'];\\n};\\n\\nmpl.figure.prototype.handle_history_buttons = function (fig, msg) {\\n    for (var key in msg) {\\n        if (!(key in fig.buttons)) {\\n            continue;\\n        }\\n        fig.buttons[key].disabled = !msg[key];\\n        fig.buttons[key].setAttribute('aria-disabled', !msg[key]);\\n    }\\n};\\n\\nmpl.figure.prototype.handle_navigate_mode = function (fig, msg) {\\n    if (msg['mode'] === 'PAN') {\\n        fig.buttons['Pan'].classList.add('active');\\n        fig.buttons['Zoom'].classList.remove('active');\\n    } else if (msg['mode'] === 'ZOOM') {\\n        fig.buttons['Pan'].classList.remove('active');\\n        fig.buttons['Zoom'].classList.add('active');\\n    } else {\\n        fig.buttons['Pan'].classList.remove('active');\\n        fig.buttons['Zoom'].classList.remove('active');\\n    }\\n};\\n\\nmpl.figure.prototype.updated_canvas_event = function () {\\n    // Called whenever the canvas gets updated.\\n    this.send_message('ack', {});\\n};\\n\\n// A function to construct a web socket function for onmessage handling.\\n// Called in the figure constructor.\\nmpl.figure.prototype._make_on_message_function = function (fig) {\\n    return function socket_on_message(evt) {\\n        if (evt.data instanceof Blob) {\\n            var img = evt.data;\\n            if (img.type !== 'image/png') {\\n                /* FIXME: We get \\\"Resource interpreted as Image but\\n                 * transferred with MIME type text/plain:\\\" errors on\\n                 * Chrome.  But how to set the MIME type?  It doesn't seem\\n                 * to be part of the websocket stream */\\n                img.type = 'image/png';\\n            }\\n\\n            /* Free the memory for the previous frames */\\n            if (fig.imageObj.src) {\\n                (window.URL || window.webkitURL).revokeObjectURL(\\n                    fig.imageObj.src\\n                );\\n            }\\n\\n            fig.imageObj.src = (window.URL || window.webkitURL).createObjectURL(\\n                img\\n            );\\n            fig.updated_canvas_event();\\n            fig.waiting = false;\\n            return;\\n        } else if (\\n            typeof evt.data === 'string' &&\\n            evt.data.slice(0, 21) === 'data:image/png;base64'\\n        ) {\\n            fig.imageObj.src = evt.data;\\n            fig.updated_canvas_event();\\n            fig.waiting = false;\\n            return;\\n        }\\n\\n        var msg = JSON.parse(evt.data);\\n        var msg_type = msg['type'];\\n\\n        // Call the  \\\"handle_{type}\\\" callback, which takes\\n        // the figure and JSON message as its only arguments.\\n        try {\\n            var callback = fig['handle_' + msg_type];\\n        } catch (e) {\\n            console.log(\\n                \\\"No handler for the '\\\" + msg_type + \\\"' message type: \\\",\\n                msg\\n            );\\n            return;\\n        }\\n\\n        if (callback) {\\n            try {\\n                // console.log(\\\"Handling '\\\" + msg_type + \\\"' message: \\\", msg);\\n                callback(fig, msg);\\n            } catch (e) {\\n                console.log(\\n                    \\\"Exception inside the 'handler_\\\" + msg_type + \\\"' callback:\\\",\\n                    e,\\n                    e.stack,\\n                    msg\\n                );\\n            }\\n        }\\n    };\\n};\\n\\nfunction getModifiers(event) {\\n    var mods = [];\\n    if (event.ctrlKey) {\\n        mods.push('ctrl');\\n    }\\n    if (event.altKey) {\\n        mods.push('alt');\\n    }\\n    if (event.shiftKey) {\\n        mods.push('shift');\\n    }\\n    if (event.metaKey) {\\n        mods.push('meta');\\n    }\\n    return mods;\\n}\\n\\n/*\\n * return a copy of an object with only non-object keys\\n * we need this to avoid circular references\\n * https://stackoverflow.com/a/24161582/3208463\\n */\\nfunction simpleKeys(original) {\\n    return Object.keys(original).reduce(function (obj, key) {\\n        if (typeof original[key] !== 'object') {\\n            obj[key] = original[key];\\n        }\\n        return obj;\\n    }, {});\\n}\\n\\nmpl.figure.prototype.mouse_event = function (event, name) {\\n    if (name === 'button_press') {\\n        this.canvas.focus();\\n        this.canvas_div.focus();\\n    }\\n\\n    // from https://stackoverflow.com/q/1114465\\n    var boundingRect = this.canvas.getBoundingClientRect();\\n    var x = (event.clientX - boundingRect.left) * this.ratio;\\n    var y = (event.clientY - boundingRect.top) * this.ratio;\\n\\n    this.send_message(name, {\\n        x: x,\\n        y: y,\\n        button: event.button,\\n        step: event.step,\\n        modifiers: getModifiers(event),\\n        guiEvent: simpleKeys(event),\\n    });\\n\\n    return false;\\n};\\n\\nmpl.figure.prototype._key_event_extra = function (_event, _name) {\\n    // Handle any extra behaviour associated with a key event\\n};\\n\\nmpl.figure.prototype.key_event = function (event, name) {\\n    // Prevent repeat events\\n    if (name === 'key_press') {\\n        if (event.key === this._key) {\\n            return;\\n        } else {\\n            this._key = event.key;\\n        }\\n    }\\n    if (name === 'key_release') {\\n        this._key = null;\\n    }\\n\\n    var value = '';\\n    if (event.ctrlKey && event.key !== 'Control') {\\n        value += 'ctrl+';\\n    }\\n    else if (event.altKey && event.key !== 'Alt') {\\n        value += 'alt+';\\n    }\\n    else if (event.shiftKey && event.key !== 'Shift') {\\n        value += 'shift+';\\n    }\\n\\n    value += 'k' + event.key;\\n\\n    this._key_event_extra(event, name);\\n\\n    this.send_message(name, { key: value, guiEvent: simpleKeys(event) });\\n    return false;\\n};\\n\\nmpl.figure.prototype.toolbar_button_onclick = function (name) {\\n    if (name === 'download') {\\n        this.handle_save(this, null);\\n    } else {\\n        this.send_message('toolbar_button', { name: name });\\n    }\\n};\\n\\nmpl.figure.prototype.toolbar_button_onmouseover = function (tooltip) {\\n    this.message.textContent = tooltip;\\n};\\n\\n///////////////// REMAINING CONTENT GENERATED BY embed_js.py /////////////////\\n// prettier-ignore\\nvar _JSXTOOLS_RESIZE_OBSERVER=function(A){var t,i=new WeakMap,n=new WeakMap,a=new WeakMap,r=new WeakMap,o=new Set;function s(e){if(!(this instanceof s))throw new TypeError(\\\"Constructor requires 'new' operator\\\");i.set(this,e)}function h(){throw new TypeError(\\\"Function is not a constructor\\\")}function c(e,t,i,n){e=0 in arguments?Number(arguments[0]):0,t=1 in arguments?Number(arguments[1]):0,i=2 in arguments?Number(arguments[2]):0,n=3 in arguments?Number(arguments[3]):0,this.right=(this.x=this.left=e)+(this.width=i),this.bottom=(this.y=this.top=t)+(this.height=n),Object.freeze(this)}function d(){t=requestAnimationFrame(d);var s=new WeakMap,p=new Set;o.forEach((function(t){r.get(t).forEach((function(i){var r=t instanceof window.SVGElement,o=a.get(t),d=r?0:parseFloat(o.paddingTop),f=r?0:parseFloat(o.paddingRight),l=r?0:parseFloat(o.paddingBottom),u=r?0:parseFloat(o.paddingLeft),g=r?0:parseFloat(o.borderTopWidth),m=r?0:parseFloat(o.borderRightWidth),w=r?0:parseFloat(o.borderBottomWidth),b=u+f,F=d+l,v=(r?0:parseFloat(o.borderLeftWidth))+m,W=g+w,y=r?0:t.offsetHeight-W-t.clientHeight,E=r?0:t.offsetWidth-v-t.clientWidth,R=b+v,z=F+W,M=r?t.width:parseFloat(o.width)-R-E,O=r?t.height:parseFloat(o.height)-z-y;if(n.has(t)){var k=n.get(t);if(k[0]===M&&k[1]===O)return}n.set(t,[M,O]);var S=Object.create(h.prototype);S.target=t,S.contentRect=new c(u,d,M,O),s.has(i)||(s.set(i,[]),p.add(i)),s.get(i).push(S)}))})),p.forEach((function(e){i.get(e).call(e,s.get(e),e)}))}return s.prototype.observe=function(i){if(i instanceof window.Element){r.has(i)||(r.set(i,new Set),o.add(i),a.set(i,window.getComputedStyle(i)));var n=r.get(i);n.has(this)||n.add(this),cancelAnimationFrame(t),t=requestAnimationFrame(d)}},s.prototype.unobserve=function(i){if(i instanceof window.Element&&r.has(i)){var n=r.get(i);n.has(this)&&(n.delete(this),n.size||(r.delete(i),o.delete(i))),n.size||r.delete(i),o.size||cancelAnimationFrame(t)}},A.DOMRectReadOnly=c,A.ResizeObserver=s,A.ResizeObserverEntry=h,A}; // eslint-disable-line\\nmpl.toolbar_items = [[\\\"Home\\\", \\\"Reset original view\\\", \\\"fa fa-home\\\", \\\"home\\\"], [\\\"Back\\\", \\\"Back to previous view\\\", \\\"fa fa-arrow-left\\\", \\\"back\\\"], [\\\"Forward\\\", \\\"Forward to next view\\\", \\\"fa fa-arrow-right\\\", \\\"forward\\\"], [\\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\"], [\\\"Pan\\\", \\\"Left button pans, Right button zooms\\\\nx/y fixes axis, CTRL fixes aspect\\\", \\\"fa fa-arrows\\\", \\\"pan\\\"], [\\\"Zoom\\\", \\\"Zoom to rectangle\\\\nx/y fixes axis\\\", \\\"fa fa-square-o\\\", \\\"zoom\\\"], [\\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\"], [\\\"Download\\\", \\\"Download plot\\\", \\\"fa fa-floppy-o\\\", \\\"download\\\"]];\\n\\nmpl.extensions = [\\\"eps\\\", \\\"jpeg\\\", \\\"pgf\\\", \\\"pdf\\\", \\\"png\\\", \\\"ps\\\", \\\"raw\\\", \\\"svg\\\", \\\"tif\\\", \\\"webp\\\"];\\n\\nmpl.default_extension = \\\"png\\\";/* global mpl */\\n\\nvar comm_websocket_adapter = function (comm) {\\n    // Create a \\\"websocket\\\"-like object which calls the given IPython comm\\n    // object with the appropriate methods. Currently this is a non binary\\n    // socket, so there is still some room for performance tuning.\\n    var ws = {};\\n\\n    ws.binaryType = comm.kernel.ws.binaryType;\\n    ws.readyState = comm.kernel.ws.readyState;\\n    function updateReadyState(_event) {\\n        if (comm.kernel.ws) {\\n            ws.readyState = comm.kernel.ws.readyState;\\n        } else {\\n            ws.readyState = 3; // Closed state.\\n        }\\n    }\\n    comm.kernel.ws.addEventListener('open', updateReadyState);\\n    comm.kernel.ws.addEventListener('close', updateReadyState);\\n    comm.kernel.ws.addEventListener('error', updateReadyState);\\n\\n    ws.close = function () {\\n        comm.close();\\n    };\\n    ws.send = function (m) {\\n        //console.log('sending', m);\\n        comm.send(m);\\n    };\\n    // Register the callback with on_msg.\\n    comm.on_msg(function (msg) {\\n        //console.log('receiving', msg['content']['data'], msg);\\n        var data = msg['content']['data'];\\n        if (data['blob'] !== undefined) {\\n            data = {\\n                data: new Blob(msg['buffers'], { type: data['blob'] }),\\n            };\\n        }\\n        // Pass the mpl event to the overridden (by mpl) onmessage function.\\n        ws.onmessage(data);\\n    });\\n    return ws;\\n};\\n\\nmpl.mpl_figure_comm = function (comm, msg) {\\n    // This is the function which gets called when the mpl process\\n    // starts-up an IPython Comm through the \\\"matplotlib\\\" channel.\\n\\n    var id = msg.content.data.id;\\n    // Get hold of the div created by the display call when the Comm\\n    // socket was opened in Python.\\n    var element = document.getElementById(id);\\n    var ws_proxy = comm_websocket_adapter(comm);\\n\\n    function ondownload(figure, _format) {\\n        window.open(figure.canvas.toDataURL());\\n    }\\n\\n    var fig = new mpl.figure(id, ws_proxy, ondownload, element);\\n\\n    // Call onopen now - mpl needs it, as it is assuming we've passed it a real\\n    // web socket which is closed, not our websocket->open comm proxy.\\n    ws_proxy.onopen();\\n\\n    fig.parent_element = element;\\n    fig.cell_info = mpl.find_output_cell(\\\"<div id='\\\" + id + \\\"'></div>\\\");\\n    if (!fig.cell_info) {\\n        console.error('Failed to find cell for figure', id, fig);\\n        return;\\n    }\\n    fig.cell_info[0].output_area.element.on(\\n        'cleared',\\n        { fig: fig },\\n        fig._remove_fig_handler\\n    );\\n};\\n\\nmpl.figure.prototype.handle_close = function (fig, msg) {\\n    var width = fig.canvas.width / fig.ratio;\\n    fig.cell_info[0].output_area.element.off(\\n        'cleared',\\n        fig._remove_fig_handler\\n    );\\n    fig.resizeObserverInstance.unobserve(fig.canvas_div);\\n\\n    // Update the output cell to use the data from the current canvas.\\n    fig.push_to_output();\\n    var dataURL = fig.canvas.toDataURL();\\n    // Re-enable the keyboard manager in IPython - without this line, in FF,\\n    // the notebook keyboard shortcuts fail.\\n    IPython.keyboard_manager.enable();\\n    fig.parent_element.innerHTML =\\n        '<img src=\\\"' + dataURL + '\\\" width=\\\"' + width + '\\\">';\\n    fig.close_ws(fig, msg);\\n};\\n\\nmpl.figure.prototype.close_ws = function (fig, msg) {\\n    fig.send_message('closing', msg);\\n    // fig.ws.close()\\n};\\n\\nmpl.figure.prototype.push_to_output = function (_remove_interactive) {\\n    // Turn the data on the canvas into data in the output cell.\\n    var width = this.canvas.width / this.ratio;\\n    var dataURL = this.canvas.toDataURL();\\n    this.cell_info[1]['text/html'] =\\n        '<img src=\\\"' + dataURL + '\\\" width=\\\"' + width + '\\\">';\\n};\\n\\nmpl.figure.prototype.updated_canvas_event = function () {\\n    // Tell IPython that the notebook contents must change.\\n    IPython.notebook.set_dirty(true);\\n    this.send_message('ack', {});\\n    var fig = this;\\n    // Wait a second, then push the new image to the DOM so\\n    // that it is saved nicely (might be nice to debounce this).\\n    setTimeout(function () {\\n        fig.push_to_output();\\n    }, 1000);\\n};\\n\\nmpl.figure.prototype._init_toolbar = function () {\\n    var fig = this;\\n\\n    var toolbar = document.createElement('div');\\n    toolbar.classList = 'btn-toolbar';\\n    this.root.appendChild(toolbar);\\n\\n    function on_click_closure(name) {\\n        return function (_event) {\\n            return fig.toolbar_button_onclick(name);\\n        };\\n    }\\n\\n    function on_mouseover_closure(tooltip) {\\n        return function (event) {\\n            if (!event.currentTarget.disabled) {\\n                return fig.toolbar_button_onmouseover(tooltip);\\n            }\\n        };\\n    }\\n\\n    fig.buttons = {};\\n    var buttonGroup = document.createElement('div');\\n    buttonGroup.classList = 'btn-group';\\n    var button;\\n    for (var toolbar_ind in mpl.toolbar_items) {\\n        var name = mpl.toolbar_items[toolbar_ind][0];\\n        var tooltip = mpl.toolbar_items[toolbar_ind][1];\\n        var image = mpl.toolbar_items[toolbar_ind][2];\\n        var method_name = mpl.toolbar_items[toolbar_ind][3];\\n\\n        if (!name) {\\n            /* Instead of a spacer, we start a new button group. */\\n            if (buttonGroup.hasChildNodes()) {\\n                toolbar.appendChild(buttonGroup);\\n            }\\n            buttonGroup = document.createElement('div');\\n            buttonGroup.classList = 'btn-group';\\n            continue;\\n        }\\n\\n        button = fig.buttons[name] = document.createElement('button');\\n        button.classList = 'btn btn-default';\\n        button.href = '#';\\n        button.title = name;\\n        button.innerHTML = '<i class=\\\"fa ' + image + ' fa-lg\\\"></i>';\\n        button.addEventListener('click', on_click_closure(method_name));\\n        button.addEventListener('mouseover', on_mouseover_closure(tooltip));\\n        buttonGroup.appendChild(button);\\n    }\\n\\n    if (buttonGroup.hasChildNodes()) {\\n        toolbar.appendChild(buttonGroup);\\n    }\\n\\n    // Add the status bar.\\n    var status_bar = document.createElement('span');\\n    status_bar.classList = 'mpl-message pull-right';\\n    toolbar.appendChild(status_bar);\\n    this.message = status_bar;\\n\\n    // Add the close button to the window.\\n    var buttongrp = document.createElement('div');\\n    buttongrp.classList = 'btn-group inline pull-right';\\n    button = document.createElement('button');\\n    button.classList = 'btn btn-mini btn-primary';\\n    button.href = '#';\\n    button.title = 'Stop Interaction';\\n    button.innerHTML = '<i class=\\\"fa fa-power-off icon-remove icon-large\\\"></i>';\\n    button.addEventListener('click', function (_evt) {\\n        fig.handle_close(fig, {});\\n    });\\n    button.addEventListener(\\n        'mouseover',\\n        on_mouseover_closure('Stop Interaction')\\n    );\\n    buttongrp.appendChild(button);\\n    var titlebar = this.root.querySelector('.ui-dialog-titlebar');\\n    titlebar.insertBefore(buttongrp, titlebar.firstChild);\\n};\\n\\nmpl.figure.prototype._remove_fig_handler = function (event) {\\n    var fig = event.data.fig;\\n    if (event.target !== this) {\\n        // Ignore bubbled events from children.\\n        return;\\n    }\\n    fig.close_ws(fig, {});\\n};\\n\\nmpl.figure.prototype._root_extra_style = function (el) {\\n    el.style.boxSizing = 'content-box'; // override notebook setting of border-box.\\n};\\n\\nmpl.figure.prototype._canvas_extra_style = function (el) {\\n    // this is important to make the div 'focusable\\n    el.setAttribute('tabindex', 0);\\n    // reach out to IPython and tell the keyboard manager to turn it's self\\n    // off when our div gets focus\\n\\n    // location in version 3\\n    if (IPython.notebook.keyboard_manager) {\\n        IPython.notebook.keyboard_manager.register_events(el);\\n    } else {\\n        // location in version 2\\n        IPython.keyboard_manager.register_events(el);\\n    }\\n};\\n\\nmpl.figure.prototype._key_event_extra = function (event, _name) {\\n    // Check for shift+enter\\n    if (event.shiftKey && event.which === 13) {\\n        this.canvas_div.blur();\\n        // select the cell after this one\\n        var index = IPython.notebook.find_cell_index(this.cell_info[0]);\\n        IPython.notebook.select(index + 1);\\n    }\\n};\\n\\nmpl.figure.prototype.handle_save = function (fig, _msg) {\\n    fig.ondownload(fig, null);\\n};\\n\\nmpl.find_output_cell = function (html_output) {\\n    // Return the cell and output element which can be found *uniquely* in the notebook.\\n    // Note - this is a bit hacky, but it is done because the \\\"notebook_saving.Notebook\\\"\\n    // IPython event is triggered only after the cells have been serialised, which for\\n    // our purposes (turning an active figure into a static one), is too late.\\n    var cells = IPython.notebook.get_cells();\\n    var ncells = cells.length;\\n    for (var i = 0; i < ncells; i++) {\\n        var cell = cells[i];\\n        if (cell.cell_type === 'code') {\\n            for (var j = 0; j < cell.output_area.outputs.length; j++) {\\n                var data = cell.output_area.outputs[j];\\n                if (data.data) {\\n                    // IPython >= 3 moved mimebundle to data attribute of output\\n                    data = data.data;\\n                }\\n                if (data['text/html'] === html_output) {\\n                    return [cell, data, j];\\n                }\\n            }\\n        }\\n    }\\n};\\n\\n// Register the function which deals with the matplotlib target/channel.\\n// The kernel may be null if the page has been refreshed.\\nif (IPython.notebook.kernel !== null) {\\n    IPython.notebook.kernel.comm_manager.register_target(\\n        'matplotlib',\\n        mpl.mpl_figure_comm\\n    );\\n}\\n\"\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"data\": {\n      \"text/plain\": \"<IPython.core.display.HTML object>\",\n      \"text/html\": \"<div id='b24a4c16-9ac2-49c1-9efd-01ea14ef83c5'></div>\"\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"data\": {\n      \"text/plain\": \"[<matplotlib.lines.Line2D at 0x137813850>]\"\n     },\n     \"execution_count\": 129,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"trajectories=[]\\n\",\n    \"fig, ax = plt.subplots()\\n\",\n    \"ax.plot(np.arange(start=0,stop=50.+1e-4,step=1e-4),[u[1,1] for u in info])\\n\",\n    \"ax.plot(np.arange(start=0,stop=50.+1e-5,step=1e-5),[u[1,1] for u in info2])\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T23:53:26.721218Z\",\n     \"start_time\": \"2023-12-07T23:53:25.640230Z\"\n    }\n   },\n   \"id\": \"d02a90c75f3008c8\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 54,\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": \"array([[ 1.00000205e+00-2.33624112e-18j, -7.89686301e-06-2.84021164e-07j,\\n        -8.19612484e-06-8.00439925e-09j,  1.97198116e-06+7.30184510e-08j],\\n       [-7.89686301e-06+2.84021164e-07j,  1.00006516e+00-4.24847323e-18j,\\n         1.97271103e-06+6.33177438e-08j, -7.59615085e-06+1.75866218e-08j],\\n       [-8.19612484e-06+8.00439925e-09j,  1.97271103e-06-6.33177438e-08j,\\n         1.00006512e+00-2.18593786e-18j, -7.87922634e-06-2.83932281e-07j],\\n       [ 1.97198116e-06-7.30184510e-08j, -7.59615085e-06-1.75866218e-08j,\\n        -7.87922634e-06+2.83932281e-07j,  1.00000190e+00-3.48172935e-19j]])\"\n     },\n     \"execution_count\": 54,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"unitary_check=np.matmul(np.matrix.getH(transition),transition)\\n\",\n    \"unitary_check\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T21:14:38.188328Z\",\n     \"start_time\": \"2023-12-07T21:14:38.186257Z\"\n    }\n   },\n   \"id\": \"88166d94748ae3b\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 55,\n   \"outputs\": [],\n   \"source\": [\n    \"#prepare qubit 1 in e \\n\",\n    \"initial_state = np.array([0,0,1.,0,], dtype=complex)\\n\",\n    \"desired_state = np.array([0,1.,0,0,], dtype=complex)\\n\",\n    \"\\n\",\n    \"iSWAP=np.zeros((4,4),dtype=complex)\\n\",\n    \"iSWAP[0,0]=1.\\n\",\n    \"iSWAP[3,3]=1.\\n\",\n    \"iSWAP[2,1]=-1j\\n\",\n    \"iSWAP[1,2]=-1j\\n\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T21:14:38.192641Z\",\n     \"start_time\": \"2023-12-07T21:14:38.189023Z\"\n    }\n   },\n   \"id\": \"e6daa347ed839f8f\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 56,\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": \"-1j\"\n     },\n     \"execution_count\": 56,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"trans_state=np.matmul(iSWAP,initial_state)\\n\",\n    \"np.matmul(np.matrix.getH(desired_state),trans_state)\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T21:14:38.193734Z\",\n     \"start_time\": \"2023-12-07T21:14:38.191888Z\"\n    }\n   },\n   \"id\": \"cefcafbd8acf47ca\"\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"$$s_1(t),\\\\ s_2(t), g(t)$$\\n\",\n    \"\\n\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"id\": \"99aeae190f40d3b1\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 57,\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": \"array([0.-0.j, 1.-0.j, 0.-0.j, 0.-0.j])\"\n     },\n     \"execution_count\": 57,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"np.matrix.getH(desired_state)\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T21:14:38.197528Z\",\n     \"start_time\": \"2023-12-07T21:14:38.194415Z\"\n    }\n   },\n   \"id\": \"f0b4ac664b874bad\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 58,\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": \"array([0.+0.j, 0.-1.j, 0.+0.j, 0.+0.j])\"\n     },\n     \"execution_count\": 58,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"trans_state\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-12-07T21:14:38.198844Z\",\n     \"start_time\": \"2023-12-07T21:14:38.196537Z\"\n    }\n   },\n   \"id\": \"8bbb60f88f35a24d\"\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"outputs\": [],\n   \"source\": [],\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"id\": \"502c6d04ccc86a00\"\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 2\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython2\",\n   \"version\": \"2.7.6\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/note/20231207.ipynb b/note/20231207.ipynb
--- a/note/20231207.ipynb	
+++ b/note/20231207.ipynb	
@@ -449,47 +449,32 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 124,
+   "execution_count": null,
    "outputs": [],
-   "source": [
-    "np.save('1e-5_info.npy',info2)"
-   ],
+   "source": [],
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2023-12-07T23:51:39.938833Z",
-     "start_time": "2023-12-07T23:51:39.607019Z"
+     "end_time": "2023-12-08T20:37:57.959157Z",
+     "start_time": "2023-12-08T20:37:57.953839Z"
     }
    },
    "id": "35638968121f626a"
   },
   {
    "cell_type": "code",
-   "execution_count": 129,
+   "execution_count": 1,
    "outputs": [
     {
-     "data": {
-      "text/plain": "<IPython.core.display.Javascript object>",
-      "application/javascript": "/* Put everything inside the global mpl namespace */\n/* global mpl */\nwindow.mpl = {};\n\nmpl.get_websocket_type = function () {\n    if (typeof WebSocket !== 'undefined') {\n        return WebSocket;\n    } else if (typeof MozWebSocket !== 'undefined') {\n        return MozWebSocket;\n    } else {\n        alert(\n            'Your browser does not have WebSocket support. ' +\n                'Please try Chrome, Safari or Firefox ≥ 6. ' +\n                'Firefox 4 and 5 are also supported but you ' +\n                'have to enable WebSockets in about:config.'\n        );\n    }\n};\n\nmpl.figure = function (figure_id, websocket, ondownload, parent_element) {\n    this.id = figure_id;\n\n    this.ws = websocket;\n\n    this.supports_binary = this.ws.binaryType !== undefined;\n\n    if (!this.supports_binary) {\n        var warnings = document.getElementById('mpl-warnings');\n        if (warnings) {\n            warnings.style.display = 'block';\n            warnings.textContent =\n                'This browser does not support binary websocket messages. ' +\n                'Performance may be slow.';\n        }\n    }\n\n    this.imageObj = new Image();\n\n    this.context = undefined;\n    this.message = undefined;\n    this.canvas = undefined;\n    this.rubberband_canvas = undefined;\n    this.rubberband_context = undefined;\n    this.format_dropdown = undefined;\n\n    this.image_mode = 'full';\n\n    this.root = document.createElement('div');\n    this.root.setAttribute('style', 'display: inline-block');\n    this._root_extra_style(this.root);\n\n    parent_element.appendChild(this.root);\n\n    this._init_header(this);\n    this._init_canvas(this);\n    this._init_toolbar(this);\n\n    var fig = this;\n\n    this.waiting = false;\n\n    this.ws.onopen = function () {\n        fig.send_message('supports_binary', { value: fig.supports_binary });\n        fig.send_message('send_image_mode', {});\n        if (fig.ratio !== 1) {\n            fig.send_message('set_device_pixel_ratio', {\n                device_pixel_ratio: fig.ratio,\n            });\n        }\n        fig.send_message('refresh', {});\n    };\n\n    this.imageObj.onload = function () {\n        if (fig.image_mode === 'full') {\n            // Full images could contain transparency (where diff images\n            // almost always do), so we need to clear the canvas so that\n            // there is no ghosting.\n            fig.context.clearRect(0, 0, fig.canvas.width, fig.canvas.height);\n        }\n        fig.context.drawImage(fig.imageObj, 0, 0);\n    };\n\n    this.imageObj.onunload = function () {\n        fig.ws.close();\n    };\n\n    this.ws.onmessage = this._make_on_message_function(this);\n\n    this.ondownload = ondownload;\n};\n\nmpl.figure.prototype._init_header = function () {\n    var titlebar = document.createElement('div');\n    titlebar.classList =\n        'ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix';\n    var titletext = document.createElement('div');\n    titletext.classList = 'ui-dialog-title';\n    titletext.setAttribute(\n        'style',\n        'width: 100%; text-align: center; padding: 3px;'\n    );\n    titlebar.appendChild(titletext);\n    this.root.appendChild(titlebar);\n    this.header = titletext;\n};\n\nmpl.figure.prototype._canvas_extra_style = function (_canvas_div) {};\n\nmpl.figure.prototype._root_extra_style = function (_canvas_div) {};\n\nmpl.figure.prototype._init_canvas = function () {\n    var fig = this;\n\n    var canvas_div = (this.canvas_div = document.createElement('div'));\n    canvas_div.setAttribute('tabindex', '0');\n    canvas_div.setAttribute(\n        'style',\n        'border: 1px solid #ddd;' +\n            'box-sizing: content-box;' +\n            'clear: both;' +\n            'min-height: 1px;' +\n            'min-width: 1px;' +\n            'outline: 0;' +\n            'overflow: hidden;' +\n            'position: relative;' +\n            'resize: both;' +\n            'z-index: 2;'\n    );\n\n    function on_keyboard_event_closure(name) {\n        return function (event) {\n            return fig.key_event(event, name);\n        };\n    }\n\n    canvas_div.addEventListener(\n        'keydown',\n        on_keyboard_event_closure('key_press')\n    );\n    canvas_div.addEventListener(\n        'keyup',\n        on_keyboard_event_closure('key_release')\n    );\n\n    this._canvas_extra_style(canvas_div);\n    this.root.appendChild(canvas_div);\n\n    var canvas = (this.canvas = document.createElement('canvas'));\n    canvas.classList.add('mpl-canvas');\n    canvas.setAttribute(\n        'style',\n        'box-sizing: content-box;' +\n            'pointer-events: none;' +\n            'position: relative;' +\n            'z-index: 0;'\n    );\n\n    this.context = canvas.getContext('2d');\n\n    var backingStore =\n        this.context.backingStorePixelRatio ||\n        this.context.webkitBackingStorePixelRatio ||\n        this.context.mozBackingStorePixelRatio ||\n        this.context.msBackingStorePixelRatio ||\n        this.context.oBackingStorePixelRatio ||\n        this.context.backingStorePixelRatio ||\n        1;\n\n    this.ratio = (window.devicePixelRatio || 1) / backingStore;\n\n    var rubberband_canvas = (this.rubberband_canvas = document.createElement(\n        'canvas'\n    ));\n    rubberband_canvas.setAttribute(\n        'style',\n        'box-sizing: content-box;' +\n            'left: 0;' +\n            'pointer-events: none;' +\n            'position: absolute;' +\n            'top: 0;' +\n            'z-index: 1;'\n    );\n\n    // Apply a ponyfill if ResizeObserver is not implemented by browser.\n    if (this.ResizeObserver === undefined) {\n        if (window.ResizeObserver !== undefined) {\n            this.ResizeObserver = window.ResizeObserver;\n        } else {\n            var obs = _JSXTOOLS_RESIZE_OBSERVER({});\n            this.ResizeObserver = obs.ResizeObserver;\n        }\n    }\n\n    this.resizeObserverInstance = new this.ResizeObserver(function (entries) {\n        var nentries = entries.length;\n        for (var i = 0; i < nentries; i++) {\n            var entry = entries[i];\n            var width, height;\n            if (entry.contentBoxSize) {\n                if (entry.contentBoxSize instanceof Array) {\n                    // Chrome 84 implements new version of spec.\n                    width = entry.contentBoxSize[0].inlineSize;\n                    height = entry.contentBoxSize[0].blockSize;\n                } else {\n                    // Firefox implements old version of spec.\n                    width = entry.contentBoxSize.inlineSize;\n                    height = entry.contentBoxSize.blockSize;\n                }\n            } else {\n                // Chrome <84 implements even older version of spec.\n                width = entry.contentRect.width;\n                height = entry.contentRect.height;\n            }\n\n            // Keep the size of the canvas and rubber band canvas in sync with\n            // the canvas container.\n            if (entry.devicePixelContentBoxSize) {\n                // Chrome 84 implements new version of spec.\n                canvas.setAttribute(\n                    'width',\n                    entry.devicePixelContentBoxSize[0].inlineSize\n                );\n                canvas.setAttribute(\n                    'height',\n                    entry.devicePixelContentBoxSize[0].blockSize\n                );\n            } else {\n                canvas.setAttribute('width', width * fig.ratio);\n                canvas.setAttribute('height', height * fig.ratio);\n            }\n            /* This rescales the canvas back to display pixels, so that it\n             * appears correct on HiDPI screens. */\n            canvas.style.width = width + 'px';\n            canvas.style.height = height + 'px';\n\n            rubberband_canvas.setAttribute('width', width);\n            rubberband_canvas.setAttribute('height', height);\n\n            // And update the size in Python. We ignore the initial 0/0 size\n            // that occurs as the element is placed into the DOM, which should\n            // otherwise not happen due to the minimum size styling.\n            if (fig.ws.readyState == 1 && width != 0 && height != 0) {\n                fig.request_resize(width, height);\n            }\n        }\n    });\n    this.resizeObserverInstance.observe(canvas_div);\n\n    function on_mouse_event_closure(name) {\n        /* User Agent sniffing is bad, but WebKit is busted:\n         * https://bugs.webkit.org/show_bug.cgi?id=144526\n         * https://bugs.webkit.org/show_bug.cgi?id=181818\n         * The worst that happens here is that they get an extra browser\n         * selection when dragging, if this check fails to catch them.\n         */\n        var UA = navigator.userAgent;\n        var isWebKit = /AppleWebKit/.test(UA) && !/Chrome/.test(UA);\n        if(isWebKit) {\n            return function (event) {\n                /* This prevents the web browser from automatically changing to\n                 * the text insertion cursor when the button is pressed. We\n                 * want to control all of the cursor setting manually through\n                 * the 'cursor' event from matplotlib */\n                event.preventDefault()\n                return fig.mouse_event(event, name);\n            };\n        } else {\n            return function (event) {\n                return fig.mouse_event(event, name);\n            };\n        }\n    }\n\n    canvas_div.addEventListener(\n        'mousedown',\n        on_mouse_event_closure('button_press')\n    );\n    canvas_div.addEventListener(\n        'mouseup',\n        on_mouse_event_closure('button_release')\n    );\n    canvas_div.addEventListener(\n        'dblclick',\n        on_mouse_event_closure('dblclick')\n    );\n    // Throttle sequential mouse events to 1 every 20ms.\n    canvas_div.addEventListener(\n        'mousemove',\n        on_mouse_event_closure('motion_notify')\n    );\n\n    canvas_div.addEventListener(\n        'mouseenter',\n        on_mouse_event_closure('figure_enter')\n    );\n    canvas_div.addEventListener(\n        'mouseleave',\n        on_mouse_event_closure('figure_leave')\n    );\n\n    canvas_div.addEventListener('wheel', function (event) {\n        if (event.deltaY < 0) {\n            event.step = 1;\n        } else {\n            event.step = -1;\n        }\n        on_mouse_event_closure('scroll')(event);\n    });\n\n    canvas_div.appendChild(canvas);\n    canvas_div.appendChild(rubberband_canvas);\n\n    this.rubberband_context = rubberband_canvas.getContext('2d');\n    this.rubberband_context.strokeStyle = '#000000';\n\n    this._resize_canvas = function (width, height, forward) {\n        if (forward) {\n            canvas_div.style.width = width + 'px';\n            canvas_div.style.height = height + 'px';\n        }\n    };\n\n    // Disable right mouse context menu.\n    canvas_div.addEventListener('contextmenu', function (_e) {\n        event.preventDefault();\n        return false;\n    });\n\n    function set_focus() {\n        canvas.focus();\n        canvas_div.focus();\n    }\n\n    window.setTimeout(set_focus, 100);\n};\n\nmpl.figure.prototype._init_toolbar = function () {\n    var fig = this;\n\n    var toolbar = document.createElement('div');\n    toolbar.classList = 'mpl-toolbar';\n    this.root.appendChild(toolbar);\n\n    function on_click_closure(name) {\n        return function (_event) {\n            return fig.toolbar_button_onclick(name);\n        };\n    }\n\n    function on_mouseover_closure(tooltip) {\n        return function (event) {\n            if (!event.currentTarget.disabled) {\n                return fig.toolbar_button_onmouseover(tooltip);\n            }\n        };\n    }\n\n    fig.buttons = {};\n    var buttonGroup = document.createElement('div');\n    buttonGroup.classList = 'mpl-button-group';\n    for (var toolbar_ind in mpl.toolbar_items) {\n        var name = mpl.toolbar_items[toolbar_ind][0];\n        var tooltip = mpl.toolbar_items[toolbar_ind][1];\n        var image = mpl.toolbar_items[toolbar_ind][2];\n        var method_name = mpl.toolbar_items[toolbar_ind][3];\n\n        if (!name) {\n            /* Instead of a spacer, we start a new button group. */\n            if (buttonGroup.hasChildNodes()) {\n                toolbar.appendChild(buttonGroup);\n            }\n            buttonGroup = document.createElement('div');\n            buttonGroup.classList = 'mpl-button-group';\n            continue;\n        }\n\n        var button = (fig.buttons[name] = document.createElement('button'));\n        button.classList = 'mpl-widget';\n        button.setAttribute('role', 'button');\n        button.setAttribute('aria-disabled', 'false');\n        button.addEventListener('click', on_click_closure(method_name));\n        button.addEventListener('mouseover', on_mouseover_closure(tooltip));\n\n        var icon_img = document.createElement('img');\n        icon_img.src = '_images/' + image + '.png';\n        icon_img.srcset = '_images/' + image + '_large.png 2x';\n        icon_img.alt = tooltip;\n        button.appendChild(icon_img);\n\n        buttonGroup.appendChild(button);\n    }\n\n    if (buttonGroup.hasChildNodes()) {\n        toolbar.appendChild(buttonGroup);\n    }\n\n    var fmt_picker = document.createElement('select');\n    fmt_picker.classList = 'mpl-widget';\n    toolbar.appendChild(fmt_picker);\n    this.format_dropdown = fmt_picker;\n\n    for (var ind in mpl.extensions) {\n        var fmt = mpl.extensions[ind];\n        var option = document.createElement('option');\n        option.selected = fmt === mpl.default_extension;\n        option.innerHTML = fmt;\n        fmt_picker.appendChild(option);\n    }\n\n    var status_bar = document.createElement('span');\n    status_bar.classList = 'mpl-message';\n    toolbar.appendChild(status_bar);\n    this.message = status_bar;\n};\n\nmpl.figure.prototype.request_resize = function (x_pixels, y_pixels) {\n    // Request matplotlib to resize the figure. Matplotlib will then trigger a resize in the client,\n    // which will in turn request a refresh of the image.\n    this.send_message('resize', { width: x_pixels, height: y_pixels });\n};\n\nmpl.figure.prototype.send_message = function (type, properties) {\n    properties['type'] = type;\n    properties['figure_id'] = this.id;\n    this.ws.send(JSON.stringify(properties));\n};\n\nmpl.figure.prototype.send_draw_message = function () {\n    if (!this.waiting) {\n        this.waiting = true;\n        this.ws.send(JSON.stringify({ type: 'draw', figure_id: this.id }));\n    }\n};\n\nmpl.figure.prototype.handle_save = function (fig, _msg) {\n    var format_dropdown = fig.format_dropdown;\n    var format = format_dropdown.options[format_dropdown.selectedIndex].value;\n    fig.ondownload(fig, format);\n};\n\nmpl.figure.prototype.handle_resize = function (fig, msg) {\n    var size = msg['size'];\n    if (size[0] !== fig.canvas.width || size[1] !== fig.canvas.height) {\n        fig._resize_canvas(size[0], size[1], msg['forward']);\n        fig.send_message('refresh', {});\n    }\n};\n\nmpl.figure.prototype.handle_rubberband = function (fig, msg) {\n    var x0 = msg['x0'] / fig.ratio;\n    var y0 = (fig.canvas.height - msg['y0']) / fig.ratio;\n    var x1 = msg['x1'] / fig.ratio;\n    var y1 = (fig.canvas.height - msg['y1']) / fig.ratio;\n    x0 = Math.floor(x0) + 0.5;\n    y0 = Math.floor(y0) + 0.5;\n    x1 = Math.floor(x1) + 0.5;\n    y1 = Math.floor(y1) + 0.5;\n    var min_x = Math.min(x0, x1);\n    var min_y = Math.min(y0, y1);\n    var width = Math.abs(x1 - x0);\n    var height = Math.abs(y1 - y0);\n\n    fig.rubberband_context.clearRect(\n        0,\n        0,\n        fig.canvas.width / fig.ratio,\n        fig.canvas.height / fig.ratio\n    );\n\n    fig.rubberband_context.strokeRect(min_x, min_y, width, height);\n};\n\nmpl.figure.prototype.handle_figure_label = function (fig, msg) {\n    // Updates the figure title.\n    fig.header.textContent = msg['label'];\n};\n\nmpl.figure.prototype.handle_cursor = function (fig, msg) {\n    fig.canvas_div.style.cursor = msg['cursor'];\n};\n\nmpl.figure.prototype.handle_message = function (fig, msg) {\n    fig.message.textContent = msg['message'];\n};\n\nmpl.figure.prototype.handle_draw = function (fig, _msg) {\n    // Request the server to send over a new figure.\n    fig.send_draw_message();\n};\n\nmpl.figure.prototype.handle_image_mode = function (fig, msg) {\n    fig.image_mode = msg['mode'];\n};\n\nmpl.figure.prototype.handle_history_buttons = function (fig, msg) {\n    for (var key in msg) {\n        if (!(key in fig.buttons)) {\n            continue;\n        }\n        fig.buttons[key].disabled = !msg[key];\n        fig.buttons[key].setAttribute('aria-disabled', !msg[key]);\n    }\n};\n\nmpl.figure.prototype.handle_navigate_mode = function (fig, msg) {\n    if (msg['mode'] === 'PAN') {\n        fig.buttons['Pan'].classList.add('active');\n        fig.buttons['Zoom'].classList.remove('active');\n    } else if (msg['mode'] === 'ZOOM') {\n        fig.buttons['Pan'].classList.remove('active');\n        fig.buttons['Zoom'].classList.add('active');\n    } else {\n        fig.buttons['Pan'].classList.remove('active');\n        fig.buttons['Zoom'].classList.remove('active');\n    }\n};\n\nmpl.figure.prototype.updated_canvas_event = function () {\n    // Called whenever the canvas gets updated.\n    this.send_message('ack', {});\n};\n\n// A function to construct a web socket function for onmessage handling.\n// Called in the figure constructor.\nmpl.figure.prototype._make_on_message_function = function (fig) {\n    return function socket_on_message(evt) {\n        if (evt.data instanceof Blob) {\n            var img = evt.data;\n            if (img.type !== 'image/png') {\n                /* FIXME: We get \"Resource interpreted as Image but\n                 * transferred with MIME type text/plain:\" errors on\n                 * Chrome.  But how to set the MIME type?  It doesn't seem\n                 * to be part of the websocket stream */\n                img.type = 'image/png';\n            }\n\n            /* Free the memory for the previous frames */\n            if (fig.imageObj.src) {\n                (window.URL || window.webkitURL).revokeObjectURL(\n                    fig.imageObj.src\n                );\n            }\n\n            fig.imageObj.src = (window.URL || window.webkitURL).createObjectURL(\n                img\n            );\n            fig.updated_canvas_event();\n            fig.waiting = false;\n            return;\n        } else if (\n            typeof evt.data === 'string' &&\n            evt.data.slice(0, 21) === 'data:image/png;base64'\n        ) {\n            fig.imageObj.src = evt.data;\n            fig.updated_canvas_event();\n            fig.waiting = false;\n            return;\n        }\n\n        var msg = JSON.parse(evt.data);\n        var msg_type = msg['type'];\n\n        // Call the  \"handle_{type}\" callback, which takes\n        // the figure and JSON message as its only arguments.\n        try {\n            var callback = fig['handle_' + msg_type];\n        } catch (e) {\n            console.log(\n                \"No handler for the '\" + msg_type + \"' message type: \",\n                msg\n            );\n            return;\n        }\n\n        if (callback) {\n            try {\n                // console.log(\"Handling '\" + msg_type + \"' message: \", msg);\n                callback(fig, msg);\n            } catch (e) {\n                console.log(\n                    \"Exception inside the 'handler_\" + msg_type + \"' callback:\",\n                    e,\n                    e.stack,\n                    msg\n                );\n            }\n        }\n    };\n};\n\nfunction getModifiers(event) {\n    var mods = [];\n    if (event.ctrlKey) {\n        mods.push('ctrl');\n    }\n    if (event.altKey) {\n        mods.push('alt');\n    }\n    if (event.shiftKey) {\n        mods.push('shift');\n    }\n    if (event.metaKey) {\n        mods.push('meta');\n    }\n    return mods;\n}\n\n/*\n * return a copy of an object with only non-object keys\n * we need this to avoid circular references\n * https://stackoverflow.com/a/24161582/3208463\n */\nfunction simpleKeys(original) {\n    return Object.keys(original).reduce(function (obj, key) {\n        if (typeof original[key] !== 'object') {\n            obj[key] = original[key];\n        }\n        return obj;\n    }, {});\n}\n\nmpl.figure.prototype.mouse_event = function (event, name) {\n    if (name === 'button_press') {\n        this.canvas.focus();\n        this.canvas_div.focus();\n    }\n\n    // from https://stackoverflow.com/q/1114465\n    var boundingRect = this.canvas.getBoundingClientRect();\n    var x = (event.clientX - boundingRect.left) * this.ratio;\n    var y = (event.clientY - boundingRect.top) * this.ratio;\n\n    this.send_message(name, {\n        x: x,\n        y: y,\n        button: event.button,\n        step: event.step,\n        modifiers: getModifiers(event),\n        guiEvent: simpleKeys(event),\n    });\n\n    return false;\n};\n\nmpl.figure.prototype._key_event_extra = function (_event, _name) {\n    // Handle any extra behaviour associated with a key event\n};\n\nmpl.figure.prototype.key_event = function (event, name) {\n    // Prevent repeat events\n    if (name === 'key_press') {\n        if (event.key === this._key) {\n            return;\n        } else {\n            this._key = event.key;\n        }\n    }\n    if (name === 'key_release') {\n        this._key = null;\n    }\n\n    var value = '';\n    if (event.ctrlKey && event.key !== 'Control') {\n        value += 'ctrl+';\n    }\n    else if (event.altKey && event.key !== 'Alt') {\n        value += 'alt+';\n    }\n    else if (event.shiftKey && event.key !== 'Shift') {\n        value += 'shift+';\n    }\n\n    value += 'k' + event.key;\n\n    this._key_event_extra(event, name);\n\n    this.send_message(name, { key: value, guiEvent: simpleKeys(event) });\n    return false;\n};\n\nmpl.figure.prototype.toolbar_button_onclick = function (name) {\n    if (name === 'download') {\n        this.handle_save(this, null);\n    } else {\n        this.send_message('toolbar_button', { name: name });\n    }\n};\n\nmpl.figure.prototype.toolbar_button_onmouseover = function (tooltip) {\n    this.message.textContent = tooltip;\n};\n\n///////////////// REMAINING CONTENT GENERATED BY embed_js.py /////////////////\n// prettier-ignore\nvar _JSXTOOLS_RESIZE_OBSERVER=function(A){var t,i=new WeakMap,n=new WeakMap,a=new WeakMap,r=new WeakMap,o=new Set;function s(e){if(!(this instanceof s))throw new TypeError(\"Constructor requires 'new' operator\");i.set(this,e)}function h(){throw new TypeError(\"Function is not a constructor\")}function c(e,t,i,n){e=0 in arguments?Number(arguments[0]):0,t=1 in arguments?Number(arguments[1]):0,i=2 in arguments?Number(arguments[2]):0,n=3 in arguments?Number(arguments[3]):0,this.right=(this.x=this.left=e)+(this.width=i),this.bottom=(this.y=this.top=t)+(this.height=n),Object.freeze(this)}function d(){t=requestAnimationFrame(d);var s=new WeakMap,p=new Set;o.forEach((function(t){r.get(t).forEach((function(i){var r=t instanceof window.SVGElement,o=a.get(t),d=r?0:parseFloat(o.paddingTop),f=r?0:parseFloat(o.paddingRight),l=r?0:parseFloat(o.paddingBottom),u=r?0:parseFloat(o.paddingLeft),g=r?0:parseFloat(o.borderTopWidth),m=r?0:parseFloat(o.borderRightWidth),w=r?0:parseFloat(o.borderBottomWidth),b=u+f,F=d+l,v=(r?0:parseFloat(o.borderLeftWidth))+m,W=g+w,y=r?0:t.offsetHeight-W-t.clientHeight,E=r?0:t.offsetWidth-v-t.clientWidth,R=b+v,z=F+W,M=r?t.width:parseFloat(o.width)-R-E,O=r?t.height:parseFloat(o.height)-z-y;if(n.has(t)){var k=n.get(t);if(k[0]===M&&k[1]===O)return}n.set(t,[M,O]);var S=Object.create(h.prototype);S.target=t,S.contentRect=new c(u,d,M,O),s.has(i)||(s.set(i,[]),p.add(i)),s.get(i).push(S)}))})),p.forEach((function(e){i.get(e).call(e,s.get(e),e)}))}return s.prototype.observe=function(i){if(i instanceof window.Element){r.has(i)||(r.set(i,new Set),o.add(i),a.set(i,window.getComputedStyle(i)));var n=r.get(i);n.has(this)||n.add(this),cancelAnimationFrame(t),t=requestAnimationFrame(d)}},s.prototype.unobserve=function(i){if(i instanceof window.Element&&r.has(i)){var n=r.get(i);n.has(this)&&(n.delete(this),n.size||(r.delete(i),o.delete(i))),n.size||r.delete(i),o.size||cancelAnimationFrame(t)}},A.DOMRectReadOnly=c,A.ResizeObserver=s,A.ResizeObserverEntry=h,A}; // eslint-disable-line\nmpl.toolbar_items = [[\"Home\", \"Reset original view\", \"fa fa-home\", \"home\"], [\"Back\", \"Back to previous view\", \"fa fa-arrow-left\", \"back\"], [\"Forward\", \"Forward to next view\", \"fa fa-arrow-right\", \"forward\"], [\"\", \"\", \"\", \"\"], [\"Pan\", \"Left button pans, Right button zooms\\nx/y fixes axis, CTRL fixes aspect\", \"fa fa-arrows\", \"pan\"], [\"Zoom\", \"Zoom to rectangle\\nx/y fixes axis\", \"fa fa-square-o\", \"zoom\"], [\"\", \"\", \"\", \"\"], [\"Download\", \"Download plot\", \"fa fa-floppy-o\", \"download\"]];\n\nmpl.extensions = [\"eps\", \"jpeg\", \"pgf\", \"pdf\", \"png\", \"ps\", \"raw\", \"svg\", \"tif\", \"webp\"];\n\nmpl.default_extension = \"png\";/* global mpl */\n\nvar comm_websocket_adapter = function (comm) {\n    // Create a \"websocket\"-like object which calls the given IPython comm\n    // object with the appropriate methods. Currently this is a non binary\n    // socket, so there is still some room for performance tuning.\n    var ws = {};\n\n    ws.binaryType = comm.kernel.ws.binaryType;\n    ws.readyState = comm.kernel.ws.readyState;\n    function updateReadyState(_event) {\n        if (comm.kernel.ws) {\n            ws.readyState = comm.kernel.ws.readyState;\n        } else {\n            ws.readyState = 3; // Closed state.\n        }\n    }\n    comm.kernel.ws.addEventListener('open', updateReadyState);\n    comm.kernel.ws.addEventListener('close', updateReadyState);\n    comm.kernel.ws.addEventListener('error', updateReadyState);\n\n    ws.close = function () {\n        comm.close();\n    };\n    ws.send = function (m) {\n        //console.log('sending', m);\n        comm.send(m);\n    };\n    // Register the callback with on_msg.\n    comm.on_msg(function (msg) {\n        //console.log('receiving', msg['content']['data'], msg);\n        var data = msg['content']['data'];\n        if (data['blob'] !== undefined) {\n            data = {\n                data: new Blob(msg['buffers'], { type: data['blob'] }),\n            };\n        }\n        // Pass the mpl event to the overridden (by mpl) onmessage function.\n        ws.onmessage(data);\n    });\n    return ws;\n};\n\nmpl.mpl_figure_comm = function (comm, msg) {\n    // This is the function which gets called when the mpl process\n    // starts-up an IPython Comm through the \"matplotlib\" channel.\n\n    var id = msg.content.data.id;\n    // Get hold of the div created by the display call when the Comm\n    // socket was opened in Python.\n    var element = document.getElementById(id);\n    var ws_proxy = comm_websocket_adapter(comm);\n\n    function ondownload(figure, _format) {\n        window.open(figure.canvas.toDataURL());\n    }\n\n    var fig = new mpl.figure(id, ws_proxy, ondownload, element);\n\n    // Call onopen now - mpl needs it, as it is assuming we've passed it a real\n    // web socket which is closed, not our websocket->open comm proxy.\n    ws_proxy.onopen();\n\n    fig.parent_element = element;\n    fig.cell_info = mpl.find_output_cell(\"<div id='\" + id + \"'></div>\");\n    if (!fig.cell_info) {\n        console.error('Failed to find cell for figure', id, fig);\n        return;\n    }\n    fig.cell_info[0].output_area.element.on(\n        'cleared',\n        { fig: fig },\n        fig._remove_fig_handler\n    );\n};\n\nmpl.figure.prototype.handle_close = function (fig, msg) {\n    var width = fig.canvas.width / fig.ratio;\n    fig.cell_info[0].output_area.element.off(\n        'cleared',\n        fig._remove_fig_handler\n    );\n    fig.resizeObserverInstance.unobserve(fig.canvas_div);\n\n    // Update the output cell to use the data from the current canvas.\n    fig.push_to_output();\n    var dataURL = fig.canvas.toDataURL();\n    // Re-enable the keyboard manager in IPython - without this line, in FF,\n    // the notebook keyboard shortcuts fail.\n    IPython.keyboard_manager.enable();\n    fig.parent_element.innerHTML =\n        '<img src=\"' + dataURL + '\" width=\"' + width + '\">';\n    fig.close_ws(fig, msg);\n};\n\nmpl.figure.prototype.close_ws = function (fig, msg) {\n    fig.send_message('closing', msg);\n    // fig.ws.close()\n};\n\nmpl.figure.prototype.push_to_output = function (_remove_interactive) {\n    // Turn the data on the canvas into data in the output cell.\n    var width = this.canvas.width / this.ratio;\n    var dataURL = this.canvas.toDataURL();\n    this.cell_info[1]['text/html'] =\n        '<img src=\"' + dataURL + '\" width=\"' + width + '\">';\n};\n\nmpl.figure.prototype.updated_canvas_event = function () {\n    // Tell IPython that the notebook contents must change.\n    IPython.notebook.set_dirty(true);\n    this.send_message('ack', {});\n    var fig = this;\n    // Wait a second, then push the new image to the DOM so\n    // that it is saved nicely (might be nice to debounce this).\n    setTimeout(function () {\n        fig.push_to_output();\n    }, 1000);\n};\n\nmpl.figure.prototype._init_toolbar = function () {\n    var fig = this;\n\n    var toolbar = document.createElement('div');\n    toolbar.classList = 'btn-toolbar';\n    this.root.appendChild(toolbar);\n\n    function on_click_closure(name) {\n        return function (_event) {\n            return fig.toolbar_button_onclick(name);\n        };\n    }\n\n    function on_mouseover_closure(tooltip) {\n        return function (event) {\n            if (!event.currentTarget.disabled) {\n                return fig.toolbar_button_onmouseover(tooltip);\n            }\n        };\n    }\n\n    fig.buttons = {};\n    var buttonGroup = document.createElement('div');\n    buttonGroup.classList = 'btn-group';\n    var button;\n    for (var toolbar_ind in mpl.toolbar_items) {\n        var name = mpl.toolbar_items[toolbar_ind][0];\n        var tooltip = mpl.toolbar_items[toolbar_ind][1];\n        var image = mpl.toolbar_items[toolbar_ind][2];\n        var method_name = mpl.toolbar_items[toolbar_ind][3];\n\n        if (!name) {\n            /* Instead of a spacer, we start a new button group. */\n            if (buttonGroup.hasChildNodes()) {\n                toolbar.appendChild(buttonGroup);\n            }\n            buttonGroup = document.createElement('div');\n            buttonGroup.classList = 'btn-group';\n            continue;\n        }\n\n        button = fig.buttons[name] = document.createElement('button');\n        button.classList = 'btn btn-default';\n        button.href = '#';\n        button.title = name;\n        button.innerHTML = '<i class=\"fa ' + image + ' fa-lg\"></i>';\n        button.addEventListener('click', on_click_closure(method_name));\n        button.addEventListener('mouseover', on_mouseover_closure(tooltip));\n        buttonGroup.appendChild(button);\n    }\n\n    if (buttonGroup.hasChildNodes()) {\n        toolbar.appendChild(buttonGroup);\n    }\n\n    // Add the status bar.\n    var status_bar = document.createElement('span');\n    status_bar.classList = 'mpl-message pull-right';\n    toolbar.appendChild(status_bar);\n    this.message = status_bar;\n\n    // Add the close button to the window.\n    var buttongrp = document.createElement('div');\n    buttongrp.classList = 'btn-group inline pull-right';\n    button = document.createElement('button');\n    button.classList = 'btn btn-mini btn-primary';\n    button.href = '#';\n    button.title = 'Stop Interaction';\n    button.innerHTML = '<i class=\"fa fa-power-off icon-remove icon-large\"></i>';\n    button.addEventListener('click', function (_evt) {\n        fig.handle_close(fig, {});\n    });\n    button.addEventListener(\n        'mouseover',\n        on_mouseover_closure('Stop Interaction')\n    );\n    buttongrp.appendChild(button);\n    var titlebar = this.root.querySelector('.ui-dialog-titlebar');\n    titlebar.insertBefore(buttongrp, titlebar.firstChild);\n};\n\nmpl.figure.prototype._remove_fig_handler = function (event) {\n    var fig = event.data.fig;\n    if (event.target !== this) {\n        // Ignore bubbled events from children.\n        return;\n    }\n    fig.close_ws(fig, {});\n};\n\nmpl.figure.prototype._root_extra_style = function (el) {\n    el.style.boxSizing = 'content-box'; // override notebook setting of border-box.\n};\n\nmpl.figure.prototype._canvas_extra_style = function (el) {\n    // this is important to make the div 'focusable\n    el.setAttribute('tabindex', 0);\n    // reach out to IPython and tell the keyboard manager to turn it's self\n    // off when our div gets focus\n\n    // location in version 3\n    if (IPython.notebook.keyboard_manager) {\n        IPython.notebook.keyboard_manager.register_events(el);\n    } else {\n        // location in version 2\n        IPython.keyboard_manager.register_events(el);\n    }\n};\n\nmpl.figure.prototype._key_event_extra = function (event, _name) {\n    // Check for shift+enter\n    if (event.shiftKey && event.which === 13) {\n        this.canvas_div.blur();\n        // select the cell after this one\n        var index = IPython.notebook.find_cell_index(this.cell_info[0]);\n        IPython.notebook.select(index + 1);\n    }\n};\n\nmpl.figure.prototype.handle_save = function (fig, _msg) {\n    fig.ondownload(fig, null);\n};\n\nmpl.find_output_cell = function (html_output) {\n    // Return the cell and output element which can be found *uniquely* in the notebook.\n    // Note - this is a bit hacky, but it is done because the \"notebook_saving.Notebook\"\n    // IPython event is triggered only after the cells have been serialised, which for\n    // our purposes (turning an active figure into a static one), is too late.\n    var cells = IPython.notebook.get_cells();\n    var ncells = cells.length;\n    for (var i = 0; i < ncells; i++) {\n        var cell = cells[i];\n        if (cell.cell_type === 'code') {\n            for (var j = 0; j < cell.output_area.outputs.length; j++) {\n                var data = cell.output_area.outputs[j];\n                if (data.data) {\n                    // IPython >= 3 moved mimebundle to data attribute of output\n                    data = data.data;\n                }\n                if (data['text/html'] === html_output) {\n                    return [cell, data, j];\n                }\n            }\n        }\n    }\n};\n\n// Register the function which deals with the matplotlib target/channel.\n// The kernel may be null if the page has been refreshed.\nif (IPython.notebook.kernel !== null) {\n    IPython.notebook.kernel.comm_manager.register_target(\n        'matplotlib',\n        mpl.mpl_figure_comm\n    );\n}\n"
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/plain": "<IPython.core.display.HTML object>",
-      "text/html": "<div id='b24a4c16-9ac2-49c1-9efd-01ea14ef83c5'></div>"
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/plain": "[<matplotlib.lines.Line2D at 0x137813850>]"
-     },
-     "execution_count": 129,
-     "metadata": {},
-     "output_type": "execute_result"
+     "ename": "NameError",
+     "evalue": "name 'plt' is not defined",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[0;31mNameError\u001B[0m                                 Traceback (most recent call last)",
+      "Cell \u001B[0;32mIn[1], line 2\u001B[0m\n\u001B[1;32m      1\u001B[0m trajectories\u001B[38;5;241m=\u001B[39m[]\n\u001B[0;32m----> 2\u001B[0m fig, ax \u001B[38;5;241m=\u001B[39m plt\u001B[38;5;241m.\u001B[39msubplots()\n\u001B[1;32m      3\u001B[0m ax\u001B[38;5;241m.\u001B[39mplot(np\u001B[38;5;241m.\u001B[39marange(start\u001B[38;5;241m=\u001B[39m\u001B[38;5;241m0\u001B[39m,stop\u001B[38;5;241m=\u001B[39m\u001B[38;5;241m50.\u001B[39m\u001B[38;5;241m+\u001B[39m\u001B[38;5;241m1e-4\u001B[39m,step\u001B[38;5;241m=\u001B[39m\u001B[38;5;241m1e-4\u001B[39m),[u[\u001B[38;5;241m1\u001B[39m,\u001B[38;5;241m1\u001B[39m] \u001B[38;5;28;01mfor\u001B[39;00m u \u001B[38;5;129;01min\u001B[39;00m info])\n\u001B[1;32m      4\u001B[0m ax\u001B[38;5;241m.\u001B[39mplot(np\u001B[38;5;241m.\u001B[39marange(start\u001B[38;5;241m=\u001B[39m\u001B[38;5;241m0\u001B[39m,stop\u001B[38;5;241m=\u001B[39m\u001B[38;5;241m50.\u001B[39m\u001B[38;5;241m+\u001B[39m\u001B[38;5;241m1e-5\u001B[39m,step\u001B[38;5;241m=\u001B[39m\u001B[38;5;241m1e-5\u001B[39m),[u[\u001B[38;5;241m1\u001B[39m,\u001B[38;5;241m1\u001B[39m] \u001B[38;5;28;01mfor\u001B[39;00m u \u001B[38;5;129;01min\u001B[39;00m info2])\n",
+      "\u001B[0;31mNameError\u001B[0m: name 'plt' is not defined"
+     ]
     }
    ],
    "source": [
@@ -501,8 +486,8 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2023-12-07T23:53:26.721218Z",
-     "start_time": "2023-12-07T23:53:25.640230Z"
+     "end_time": "2023-12-08T20:37:58.128726Z",
+     "start_time": "2023-12-08T20:37:57.958126Z"
     }
    },
    "id": "d02a90c75f3008c8"
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"d8c676ab-2fb9-494e-b204-c2e63875615a\" name=\"Changes\" comment=\"D-10\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/note/UwithgpU.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/note/UwithgpU.ipynb\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Jupyter Notebook\" />\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"FlaskConsoleOptions\" custom-start-script=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\">\n    <envs>\n      <env key=\"FLASK_APP\" value=\"app\" />\n    </envs>\n    <option name=\"myCustomStartScript\" value=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\" />\n    <option name=\"myEnvs\">\n      <map>\n        <entry key=\"FLASK_APP\" value=\"app\" />\n      </map>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;yalgaeahn&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">\n    <option name=\"selectedUrlAndAccountId\">\n      <UrlAndAccount>\n        <option name=\"accountId\" value=\"99e0ae93-14a4-49da-a009-3ddc1c31bbd5\" />\n        <option name=\"url\" value=\"https://github.com/yalgaeahn/Chicago_noRL.git\" />\n      </UrlAndAccount>\n    </option>\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 3\n}</component>\n  <component name=\"ProjectId\" id=\"2Z3tghFpb2dTLhEXgccCvv7WRzY\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"WebServerToolWindowFactoryState\": \"false\",\n    \"git-widget-placeholder\": \"main\",\n    \"last_opened_file_path\": \"/Users/yalgaeahn/Documents/Chicago/Chicago_noRL/note\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"settings.editor.selected.configurable\": \"preferences.lookFeel\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/note\" />\n    </key>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-python-sdk-67fca87a943a-c986f194a52a-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.11799.259\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"d8c676ab-2fb9-494e-b204-c2e63875615a\" name=\"Changes\" comment=\"\" />\n      <created>1701662703262</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1701662703262</updated>\n      <workItem from=\"1701662704278\" duration=\"526000\" />\n      <workItem from=\"1701703015087\" duration=\"2877000\" />\n      <workItem from=\"1701716447805\" duration=\"18185000\" />\n      <workItem from=\"1701886708247\" duration=\"6388000\" />\n      <workItem from=\"1702052172145\" duration=\"387000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"D-10\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1701703246591</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1701703246591</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"2\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"RECENT_FILTERS\">\n      <map>\n        <entry key=\"Branch\">\n          <value>\n            <list>\n              <RecentGroup>\n                <option name=\"FILTER_VALUES\">\n                  <option value=\"origin/main\" />\n                </option>\n              </RecentGroup>\n              <RecentGroup>\n                <option name=\"FILTER_VALUES\">\n                  <option value=\"main\" />\n                </option>\n              </RecentGroup>\n            </list>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"origin/main\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n              <option name=\"TEXT_FILTER_SETTINGS\">\n                <TextFilterSettings>\n                  <option name=\"REGEX\" value=\"true\" />\n                </TextFilterSettings>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"D-10\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"D-10\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -5,7 +5,9 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="d8c676ab-2fb9-494e-b204-c2e63875615a" name="Changes" comment="D-10">
+      <change afterPath="$PROJECT_DIR$/note/UwithgpU_MPS.ipynb" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/note/20231207.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/note/20231207.ipynb" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/note/UwithgpU.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/note/UwithgpU.ipynb" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -67,6 +69,7 @@
   </component>
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
+    "ASKED_ADD_EXTERNAL_FILES": "true",
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "WebServerToolWindowFactoryState": "false",
@@ -105,7 +108,7 @@
       <workItem from="1701703015087" duration="2877000" />
       <workItem from="1701716447805" duration="18185000" />
       <workItem from="1701886708247" duration="6388000" />
-      <workItem from="1702052172145" duration="387000" />
+      <workItem from="1702052172145" duration="4193000" />
     </task>
     <task id="LOCAL-00001" summary="D-10">
       <option name="closed" value="true" />
@@ -170,6 +173,7 @@
     </option>
   </component>
   <component name="VcsManagerConfiguration">
+    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
     <MESSAGE value="D-10" />
     <option name="LAST_COMMIT_MESSAGE" value="D-10" />
   </component>
